   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"semtest.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.sCheckVariables,"aw",%nobits
  20              		.align	2
  23              	sCheckVariables:
  24 0000 00000000 		.space	8
  24      00000000 
  25              		.section	.bss.sNextCheckVariable,"aw",%nobits
  26              		.align	1
  29              	sNextCheckVariable:
  30 0000 0000     		.space	2
  31              		.section	.rodata
  32              		.align	2
  33              	.LC0:
  34 0000 506F6C53 		.ascii	"PolSEM1\000"
  34      454D3100 
  35              		.align	2
  36              	.LC1:
  37 0008 506F6C53 		.ascii	"PolSEM2\000"
  37      454D3200 
  38              		.align	2
  39              	.LC2:
  40 0010 426C6B53 		.ascii	"BlkSEM1\000"
  40      454D3100 
  41              		.align	2
  42              	.LC3:
  43 0018 426C6B53 		.ascii	"BlkSEM2\000"
  43      454D3200 
  44              		.align	2
  45              	.LC4:
  46 0020 436F756E 		.ascii	"Counting_Sem_1\000"
  46      74696E67 
  46      5F53656D 
  46      5F3100
  47 002f 00       		.align	2
  48              	.LC5:
  49 0030 436F756E 		.ascii	"Counting_Sem_2\000"
  49      74696E67 
  49      5F53656D 
  49      5F3200
  50 003f 00       		.section	.text.vStartSemaphoreTasks,"ax",%progbits
  51              		.align	2
  52              		.global	vStartSemaphoreTasks
  53              		.thumb
  54              		.thumb_func
  56              	vStartSemaphoreTasks:
  57              	.LFB110:
  58              		.file 1 "App/Common/Minimal/semtest.c"
   1:App/Common/Minimal/semtest.c **** /*
   2:App/Common/Minimal/semtest.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:App/Common/Minimal/semtest.c ****     All rights reserved
   4:App/Common/Minimal/semtest.c **** 
   5:App/Common/Minimal/semtest.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:App/Common/Minimal/semtest.c **** 
   7:App/Common/Minimal/semtest.c ****     ***************************************************************************
   8:App/Common/Minimal/semtest.c ****      *                                                                       *
   9:App/Common/Minimal/semtest.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:App/Common/Minimal/semtest.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:App/Common/Minimal/semtest.c ****      *    platform software that has become a de facto standard.             *
  12:App/Common/Minimal/semtest.c ****      *                                                                       *
  13:App/Common/Minimal/semtest.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:App/Common/Minimal/semtest.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:App/Common/Minimal/semtest.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:App/Common/Minimal/semtest.c ****      *                                                                       *
  17:App/Common/Minimal/semtest.c ****      *    Thank you!                                                         *
  18:App/Common/Minimal/semtest.c ****      *                                                                       *
  19:App/Common/Minimal/semtest.c ****     ***************************************************************************
  20:App/Common/Minimal/semtest.c **** 
  21:App/Common/Minimal/semtest.c ****     This file is part of the FreeRTOS distribution.
  22:App/Common/Minimal/semtest.c **** 
  23:App/Common/Minimal/semtest.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:App/Common/Minimal/semtest.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:App/Common/Minimal/semtest.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:App/Common/Minimal/semtest.c **** 
  27:App/Common/Minimal/semtest.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:App/Common/Minimal/semtest.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:App/Common/Minimal/semtest.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:App/Common/Minimal/semtest.c ****     >>! kernel.
  31:App/Common/Minimal/semtest.c **** 
  32:App/Common/Minimal/semtest.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:App/Common/Minimal/semtest.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:App/Common/Minimal/semtest.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:App/Common/Minimal/semtest.c ****     link: http://www.freertos.org/a00114.html
  36:App/Common/Minimal/semtest.c **** 
  37:App/Common/Minimal/semtest.c ****     1 tab == 4 spaces!
  38:App/Common/Minimal/semtest.c **** 
  39:App/Common/Minimal/semtest.c ****     ***************************************************************************
  40:App/Common/Minimal/semtest.c ****      *                                                                       *
  41:App/Common/Minimal/semtest.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:App/Common/Minimal/semtest.c ****      *    not run, what could be wrong?"                                     *
  43:App/Common/Minimal/semtest.c ****      *                                                                       *
  44:App/Common/Minimal/semtest.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:App/Common/Minimal/semtest.c ****      *                                                                       *
  46:App/Common/Minimal/semtest.c ****     ***************************************************************************
  47:App/Common/Minimal/semtest.c **** 
  48:App/Common/Minimal/semtest.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:App/Common/Minimal/semtest.c ****     license and Real Time Engineers Ltd. contact details.
  50:App/Common/Minimal/semtest.c **** 
  51:App/Common/Minimal/semtest.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:App/Common/Minimal/semtest.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:App/Common/Minimal/semtest.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:App/Common/Minimal/semtest.c **** 
  55:App/Common/Minimal/semtest.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:App/Common/Minimal/semtest.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:App/Common/Minimal/semtest.c ****     licenses offer ticketed support, indemnification and middleware.
  58:App/Common/Minimal/semtest.c **** 
  59:App/Common/Minimal/semtest.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:App/Common/Minimal/semtest.c ****     engineered and independently SIL3 certified version for use in safety and
  61:App/Common/Minimal/semtest.c ****     mission critical applications that require provable dependability.
  62:App/Common/Minimal/semtest.c **** 
  63:App/Common/Minimal/semtest.c ****     1 tab == 4 spaces!
  64:App/Common/Minimal/semtest.c **** */
  65:App/Common/Minimal/semtest.c **** 
  66:App/Common/Minimal/semtest.c **** /*
  67:App/Common/Minimal/semtest.c ****  * Creates two sets of two tasks.  The tasks within a set share a variable, access 
  68:App/Common/Minimal/semtest.c ****  * to which is guarded by a semaphore.
  69:App/Common/Minimal/semtest.c ****  * 
  70:App/Common/Minimal/semtest.c ****  * Each task starts by attempting to obtain the semaphore.  On obtaining a 
  71:App/Common/Minimal/semtest.c ****  * semaphore a task checks to ensure that the guarded variable has an expected 
  72:App/Common/Minimal/semtest.c ****  * value.  It then clears the variable to zero before counting it back up to the 
  73:App/Common/Minimal/semtest.c ****  * expected value in increments of 1.  After each increment the variable is checked 
  74:App/Common/Minimal/semtest.c ****  * to ensure it contains the value to which it was just set. When the starting 
  75:App/Common/Minimal/semtest.c ****  * value is again reached the task releases the semaphore giving the other task in 
  76:App/Common/Minimal/semtest.c ****  * the set a chance to do exactly the same thing.  The starting value is high 
  77:App/Common/Minimal/semtest.c ****  * enough to ensure that a tick is likely to occur during the incrementing loop.
  78:App/Common/Minimal/semtest.c ****  *
  79:App/Common/Minimal/semtest.c ****  * An error is flagged if at any time during the process a shared variable is 
  80:App/Common/Minimal/semtest.c ****  * found to have a value other than that expected.  Such an occurrence would 
  81:App/Common/Minimal/semtest.c ****  * suggest an error in the mutual exclusion mechanism by which access to the 
  82:App/Common/Minimal/semtest.c ****  * variable is restricted.
  83:App/Common/Minimal/semtest.c ****  *
  84:App/Common/Minimal/semtest.c ****  * The first set of two tasks poll their semaphore.  The second set use blocking 
  85:App/Common/Minimal/semtest.c ****  * calls.
  86:App/Common/Minimal/semtest.c ****  *
  87:App/Common/Minimal/semtest.c ****  */
  88:App/Common/Minimal/semtest.c **** 
  89:App/Common/Minimal/semtest.c **** 
  90:App/Common/Minimal/semtest.c **** #include <stdlib.h>
  91:App/Common/Minimal/semtest.c **** 
  92:App/Common/Minimal/semtest.c **** /* Scheduler include files. */
  93:App/Common/Minimal/semtest.c **** #include "FreeRTOS.h"
  94:App/Common/Minimal/semtest.c **** #include "task.h"
  95:App/Common/Minimal/semtest.c **** #include "semphr.h"
  96:App/Common/Minimal/semtest.c **** 
  97:App/Common/Minimal/semtest.c **** /* Demo app include files. */
  98:App/Common/Minimal/semtest.c **** #include "semtest.h"
  99:App/Common/Minimal/semtest.c **** 
 100:App/Common/Minimal/semtest.c **** /* The value to which the shared variables are counted. */
 101:App/Common/Minimal/semtest.c **** #define semtstBLOCKING_EXPECTED_VALUE		( ( unsigned long ) 0xfff )
 102:App/Common/Minimal/semtest.c **** #define semtstNON_BLOCKING_EXPECTED_VALUE	( ( unsigned long ) 0xff  )
 103:App/Common/Minimal/semtest.c **** 
 104:App/Common/Minimal/semtest.c **** #define semtstSTACK_SIZE			configMINIMAL_STACK_SIZE
 105:App/Common/Minimal/semtest.c **** 
 106:App/Common/Minimal/semtest.c **** #define semtstNUM_TASKS				( 4 )
 107:App/Common/Minimal/semtest.c **** 
 108:App/Common/Minimal/semtest.c **** #define semtstDELAY_FACTOR			( ( portTickType ) 10 )
 109:App/Common/Minimal/semtest.c **** 
 110:App/Common/Minimal/semtest.c **** /* The task function as described at the top of the file. */
 111:App/Common/Minimal/semtest.c **** static portTASK_FUNCTION_PROTO( prvSemaphoreTest, pvParameters );
 112:App/Common/Minimal/semtest.c **** 
 113:App/Common/Minimal/semtest.c **** /* Structure used to pass parameters to each task. */
 114:App/Common/Minimal/semtest.c **** typedef struct SEMAPHORE_PARAMETERS
 115:App/Common/Minimal/semtest.c **** {
 116:App/Common/Minimal/semtest.c **** 	xSemaphoreHandle xSemaphore;
 117:App/Common/Minimal/semtest.c **** 	volatile unsigned long *pulSharedVariable;
 118:App/Common/Minimal/semtest.c **** 	portTickType xBlockTime;
 119:App/Common/Minimal/semtest.c **** } xSemaphoreParameters;
 120:App/Common/Minimal/semtest.c **** 
 121:App/Common/Minimal/semtest.c **** /* Variables used to check that all the tasks are still running without errors. */
 122:App/Common/Minimal/semtest.c **** static volatile short sCheckVariables[ semtstNUM_TASKS ] = { 0 };
 123:App/Common/Minimal/semtest.c **** static volatile short sNextCheckVariable = 0;
 124:App/Common/Minimal/semtest.c **** 
 125:App/Common/Minimal/semtest.c **** /*-----------------------------------------------------------*/
 126:App/Common/Minimal/semtest.c **** 
 127:App/Common/Minimal/semtest.c **** void vStartSemaphoreTasks( unsigned portBASE_TYPE uxPriority )
 128:App/Common/Minimal/semtest.c **** {
  59              		.loc 1 128 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 24
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63 0000 80B5     		push	{r7, lr}
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 7, -8
  67              		.cfi_offset 14, -4
  68 0002 8AB0     		sub	sp, sp, #40
  69              	.LCFI1:
  70              		.cfi_def_cfa_offset 48
  71 0004 04AF     		add	r7, sp, #16
  72              	.LCFI2:
  73              		.cfi_def_cfa 7, 32
  74 0006 7860     		str	r0, [r7, #4]
 129:App/Common/Minimal/semtest.c **** xSemaphoreParameters *pxFirstSemaphoreParameters, *pxSecondSemaphoreParameters;
 130:App/Common/Minimal/semtest.c **** const portTickType xBlockTime = ( portTickType ) 100;
  75              		.loc 1 130 0
  76 0008 6423     		movs	r3, #100
  77 000a 7B61     		str	r3, [r7, #20]
 131:App/Common/Minimal/semtest.c **** 
 132:App/Common/Minimal/semtest.c **** 	/* Create the structure used to pass parameters to the first two tasks. */
 133:App/Common/Minimal/semtest.c **** 	pxFirstSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters
  78              		.loc 1 133 0
  79 000c 0C20     		movs	r0, #12
  80 000e FFF7FEFF 		bl	pvPortMalloc
  81 0012 3861     		str	r0, [r7, #16]
 134:App/Common/Minimal/semtest.c **** 
 135:App/Common/Minimal/semtest.c **** 	if( pxFirstSemaphoreParameters != NULL )
  82              		.loc 1 135 0
  83 0014 3B69     		ldr	r3, [r7, #16]
  84 0016 002B     		cmp	r3, #0
  85 0018 40D0     		beq	.L2
 136:App/Common/Minimal/semtest.c **** 	{
 137:App/Common/Minimal/semtest.c **** 		/* Create the semaphore used by the first two tasks. */
 138:App/Common/Minimal/semtest.c **** 		vSemaphoreCreateBinary( pxFirstSemaphoreParameters->xSemaphore );
  86              		.loc 1 138 0
  87 001a 0120     		movs	r0, #1
  88 001c 0021     		movs	r1, #0
  89 001e 0322     		movs	r2, #3
  90 0020 FFF7FEFF 		bl	xQueueGenericCreate
  91 0024 0246     		mov	r2, r0
  92 0026 3B69     		ldr	r3, [r7, #16]
  93 0028 1A60     		str	r2, [r3]
  94 002a 3B69     		ldr	r3, [r7, #16]
  95 002c 1B68     		ldr	r3, [r3]
  96 002e 002B     		cmp	r3, #0
  97 0030 07D0     		beq	.L3
  98              		.loc 1 138 0 is_stmt 0 discriminator 1
  99 0032 3B69     		ldr	r3, [r7, #16]
 100 0034 1B68     		ldr	r3, [r3]
 101 0036 1846     		mov	r0, r3
 102 0038 0021     		movs	r1, #0
 103 003a 0022     		movs	r2, #0
 104 003c 0023     		movs	r3, #0
 105 003e FFF7FEFF 		bl	xQueueGenericSend
 106              	.L3:
 139:App/Common/Minimal/semtest.c **** 
 140:App/Common/Minimal/semtest.c **** 		if( pxFirstSemaphoreParameters->xSemaphore != NULL )
 107              		.loc 1 140 0 is_stmt 1
 108 0042 3B69     		ldr	r3, [r7, #16]
 109 0044 1B68     		ldr	r3, [r3]
 110 0046 002B     		cmp	r3, #0
 111 0048 28D0     		beq	.L2
 141:App/Common/Minimal/semtest.c **** 		{
 142:App/Common/Minimal/semtest.c **** 			/* Create the variable which is to be shared by the first two tasks. */
 143:App/Common/Minimal/semtest.c **** 			pxFirstSemaphoreParameters->pulSharedVariable = ( unsigned long * ) pvPortMalloc( sizeof( unsign
 112              		.loc 1 143 0
 113 004a 0420     		movs	r0, #4
 114 004c FFF7FEFF 		bl	pvPortMalloc
 115 0050 0246     		mov	r2, r0
 116 0052 3B69     		ldr	r3, [r7, #16]
 117 0054 5A60     		str	r2, [r3, #4]
 144:App/Common/Minimal/semtest.c **** 
 145:App/Common/Minimal/semtest.c **** 			/* Initialise the share variable to the value the tasks expect. */
 146:App/Common/Minimal/semtest.c **** 			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
 118              		.loc 1 146 0
 119 0056 3B69     		ldr	r3, [r7, #16]
 120 0058 5B68     		ldr	r3, [r3, #4]
 121 005a FF22     		movs	r2, #255
 122 005c 1A60     		str	r2, [r3]
 147:App/Common/Minimal/semtest.c **** 
 148:App/Common/Minimal/semtest.c **** 			/* The first two tasks do not block on semaphore calls. */
 149:App/Common/Minimal/semtest.c **** 			pxFirstSemaphoreParameters->xBlockTime = ( portTickType ) 0;
 123              		.loc 1 149 0
 124 005e 3B69     		ldr	r3, [r7, #16]
 125 0060 0022     		movs	r2, #0
 126 0062 9A60     		str	r2, [r3, #8]
 150:App/Common/Minimal/semtest.c **** 
 151:App/Common/Minimal/semtest.c **** 			/* Spawn the first two tasks.  As they poll they operate at the idle priority. */
 152:App/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirst
 127              		.loc 1 152 0
 128 0064 0023     		movs	r3, #0
 129 0066 0093     		str	r3, [sp]
 130 0068 0023     		movs	r3, #0
 131 006a 0193     		str	r3, [sp, #4]
 132 006c 0023     		movs	r3, #0
 133 006e 0293     		str	r3, [sp, #8]
 134 0070 0023     		movs	r3, #0
 135 0072 0393     		str	r3, [sp, #12]
 136 0074 3548     		ldr	r0, .L6
 137 0076 3649     		ldr	r1, .L6+4
 138 0078 8222     		movs	r2, #130
 139 007a 3B69     		ldr	r3, [r7, #16]
 140 007c FFF7FEFF 		bl	xTaskGenericCreate
 153:App/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "PolSEM2", semtstSTACK_SIZE, ( void * ) pxFirst
 141              		.loc 1 153 0
 142 0080 0023     		movs	r3, #0
 143 0082 0093     		str	r3, [sp]
 144 0084 0023     		movs	r3, #0
 145 0086 0193     		str	r3, [sp, #4]
 146 0088 0023     		movs	r3, #0
 147 008a 0293     		str	r3, [sp, #8]
 148 008c 0023     		movs	r3, #0
 149 008e 0393     		str	r3, [sp, #12]
 150 0090 2E48     		ldr	r0, .L6
 151 0092 3049     		ldr	r1, .L6+8
 152 0094 8222     		movs	r2, #130
 153 0096 3B69     		ldr	r3, [r7, #16]
 154 0098 FFF7FEFF 		bl	xTaskGenericCreate
 155              	.L2:
 154:App/Common/Minimal/semtest.c **** 		}
 155:App/Common/Minimal/semtest.c **** 	}
 156:App/Common/Minimal/semtest.c **** 
 157:App/Common/Minimal/semtest.c **** 	/* Do exactly the same to create the second set of tasks, only this time 
 158:App/Common/Minimal/semtest.c **** 	provide a block time for the semaphore calls. */
 159:App/Common/Minimal/semtest.c **** 	pxSecondSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameter
 156              		.loc 1 159 0
 157 009c 0C20     		movs	r0, #12
 158 009e FFF7FEFF 		bl	pvPortMalloc
 159 00a2 F860     		str	r0, [r7, #12]
 160:App/Common/Minimal/semtest.c **** 	if( pxSecondSemaphoreParameters != NULL )
 160              		.loc 1 160 0
 161 00a4 FB68     		ldr	r3, [r7, #12]
 162 00a6 002B     		cmp	r3, #0
 163 00a8 41D0     		beq	.L4
 161:App/Common/Minimal/semtest.c **** 	{
 162:App/Common/Minimal/semtest.c **** 		vSemaphoreCreateBinary( pxSecondSemaphoreParameters->xSemaphore );
 164              		.loc 1 162 0
 165 00aa 0120     		movs	r0, #1
 166 00ac 0021     		movs	r1, #0
 167 00ae 0322     		movs	r2, #3
 168 00b0 FFF7FEFF 		bl	xQueueGenericCreate
 169 00b4 0246     		mov	r2, r0
 170 00b6 FB68     		ldr	r3, [r7, #12]
 171 00b8 1A60     		str	r2, [r3]
 172 00ba FB68     		ldr	r3, [r7, #12]
 173 00bc 1B68     		ldr	r3, [r3]
 174 00be 002B     		cmp	r3, #0
 175 00c0 07D0     		beq	.L5
 176              		.loc 1 162 0 is_stmt 0 discriminator 1
 177 00c2 FB68     		ldr	r3, [r7, #12]
 178 00c4 1B68     		ldr	r3, [r3]
 179 00c6 1846     		mov	r0, r3
 180 00c8 0021     		movs	r1, #0
 181 00ca 0022     		movs	r2, #0
 182 00cc 0023     		movs	r3, #0
 183 00ce FFF7FEFF 		bl	xQueueGenericSend
 184              	.L5:
 163:App/Common/Minimal/semtest.c **** 
 164:App/Common/Minimal/semtest.c **** 		if( pxSecondSemaphoreParameters->xSemaphore != NULL )
 185              		.loc 1 164 0 is_stmt 1
 186 00d2 FB68     		ldr	r3, [r7, #12]
 187 00d4 1B68     		ldr	r3, [r3]
 188 00d6 002B     		cmp	r3, #0
 189 00d8 29D0     		beq	.L4
 165:App/Common/Minimal/semtest.c **** 		{
 166:App/Common/Minimal/semtest.c **** 			pxSecondSemaphoreParameters->pulSharedVariable = ( unsigned long * ) pvPortMalloc( sizeof( unsig
 190              		.loc 1 166 0
 191 00da 0420     		movs	r0, #4
 192 00dc FFF7FEFF 		bl	pvPortMalloc
 193 00e0 0246     		mov	r2, r0
 194 00e2 FB68     		ldr	r3, [r7, #12]
 195 00e4 5A60     		str	r2, [r3, #4]
 167:App/Common/Minimal/semtest.c **** 			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 196              		.loc 1 167 0
 197 00e6 FB68     		ldr	r3, [r7, #12]
 198 00e8 5B68     		ldr	r3, [r3, #4]
 199 00ea 40F6FF72 		movw	r2, #4095
 200 00ee 1A60     		str	r2, [r3]
 168:App/Common/Minimal/semtest.c **** 			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_RATE_MS;
 201              		.loc 1 168 0
 202 00f0 FB68     		ldr	r3, [r7, #12]
 203 00f2 7A69     		ldr	r2, [r7, #20]
 204 00f4 9A60     		str	r2, [r3, #8]
 169:App/Common/Minimal/semtest.c **** 
 170:App/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecon
 205              		.loc 1 170 0
 206 00f6 7B68     		ldr	r3, [r7, #4]
 207 00f8 0093     		str	r3, [sp]
 208 00fa 0023     		movs	r3, #0
 209 00fc 0193     		str	r3, [sp, #4]
 210 00fe 0023     		movs	r3, #0
 211 0100 0293     		str	r3, [sp, #8]
 212 0102 0023     		movs	r3, #0
 213 0104 0393     		str	r3, [sp, #12]
 214 0106 1148     		ldr	r0, .L6
 215 0108 1349     		ldr	r1, .L6+12
 216 010a 8222     		movs	r2, #130
 217 010c FB68     		ldr	r3, [r7, #12]
 218 010e FFF7FEFF 		bl	xTaskGenericCreate
 171:App/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxSecon
 219              		.loc 1 171 0
 220 0112 7B68     		ldr	r3, [r7, #4]
 221 0114 0093     		str	r3, [sp]
 222 0116 0023     		movs	r3, #0
 223 0118 0193     		str	r3, [sp, #4]
 224 011a 0023     		movs	r3, #0
 225 011c 0293     		str	r3, [sp, #8]
 226 011e 0023     		movs	r3, #0
 227 0120 0393     		str	r3, [sp, #12]
 228 0122 0A48     		ldr	r0, .L6
 229 0124 0D49     		ldr	r1, .L6+16
 230 0126 8222     		movs	r2, #130
 231 0128 FB68     		ldr	r3, [r7, #12]
 232 012a FFF7FEFF 		bl	xTaskGenericCreate
 233              	.L4:
 172:App/Common/Minimal/semtest.c **** 		}
 173:App/Common/Minimal/semtest.c **** 	}
 174:App/Common/Minimal/semtest.c **** 
 175:App/Common/Minimal/semtest.c **** 	/* vQueueAddToRegistry() adds the semaphore to the registry, if one is
 176:App/Common/Minimal/semtest.c **** 	in use.  The registry is provided as a means for kernel aware 
 177:App/Common/Minimal/semtest.c **** 	debuggers to locate semaphores and has no purpose if a kernel aware debugger
 178:App/Common/Minimal/semtest.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 179:App/Common/Minimal/semtest.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 180:App/Common/Minimal/semtest.c **** 	defined to be less than 1. */
 181:App/Common/Minimal/semtest.c **** 	vQueueAddToRegistry( ( xQueueHandle ) pxFirstSemaphoreParameters->xSemaphore, ( signed char * ) "C
 234              		.loc 1 181 0
 235 012e 3B69     		ldr	r3, [r7, #16]
 236 0130 1B68     		ldr	r3, [r3]
 237 0132 1846     		mov	r0, r3
 238 0134 0A49     		ldr	r1, .L6+20
 239 0136 FFF7FEFF 		bl	vQueueAddToRegistry
 182:App/Common/Minimal/semtest.c **** 	vQueueAddToRegistry( ( xQueueHandle ) pxSecondSemaphoreParameters->xSemaphore, ( signed char * ) "
 240              		.loc 1 182 0
 241 013a FB68     		ldr	r3, [r7, #12]
 242 013c 1B68     		ldr	r3, [r3]
 243 013e 1846     		mov	r0, r3
 244 0140 0849     		ldr	r1, .L6+24
 245 0142 FFF7FEFF 		bl	vQueueAddToRegistry
 183:App/Common/Minimal/semtest.c **** }
 246              		.loc 1 183 0
 247 0146 1837     		adds	r7, r7, #24
 248 0148 BD46     		mov	sp, r7
 249              		@ sp needed
 250 014a 80BD     		pop	{r7, pc}
 251              	.L7:
 252              		.align	2
 253              	.L6:
 254 014c 00000000 		.word	prvSemaphoreTest
 255 0150 00000000 		.word	.LC0
 256 0154 08000000 		.word	.LC1
 257 0158 10000000 		.word	.LC2
 258 015c 18000000 		.word	.LC3
 259 0160 20000000 		.word	.LC4
 260 0164 30000000 		.word	.LC5
 261              		.cfi_endproc
 262              	.LFE110:
 264              		.section	.text.prvSemaphoreTest,"ax",%progbits
 265              		.align	2
 266              		.thumb
 267              		.thumb_func
 269              	prvSemaphoreTest:
 270              	.LFB111:
 184:App/Common/Minimal/semtest.c **** /*-----------------------------------------------------------*/
 185:App/Common/Minimal/semtest.c **** 
 186:App/Common/Minimal/semtest.c **** static portTASK_FUNCTION( prvSemaphoreTest, pvParameters )
 187:App/Common/Minimal/semtest.c **** {
 271              		.loc 1 187 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 32
 274              		@ frame_needed = 1, uses_anonymous_args = 0
 275 0000 80B5     		push	{r7, lr}
 276              	.LCFI3:
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 7, -8
 279              		.cfi_offset 14, -4
 280 0002 88B0     		sub	sp, sp, #32
 281              	.LCFI4:
 282              		.cfi_def_cfa_offset 40
 283 0004 00AF     		add	r7, sp, #0
 284              	.LCFI5:
 285              		.cfi_def_cfa_register 7
 286 0006 7860     		str	r0, [r7, #4]
 188:App/Common/Minimal/semtest.c **** xSemaphoreParameters *pxParameters;
 189:App/Common/Minimal/semtest.c **** volatile unsigned long *pulSharedVariable, ulExpectedValue;
 190:App/Common/Minimal/semtest.c **** unsigned long ulCounter;
 191:App/Common/Minimal/semtest.c **** short sError = pdFALSE, sCheckVariableToUse;
 287              		.loc 1 191 0
 288 0008 0023     		movs	r3, #0
 289 000a 7B83     		strh	r3, [r7, #26]	@ movhi
 192:App/Common/Minimal/semtest.c **** 
 193:App/Common/Minimal/semtest.c **** 	/* See which check variable to use.  sNextCheckVariable is not semaphore 
 194:App/Common/Minimal/semtest.c **** 	protected! */
 195:App/Common/Minimal/semtest.c **** 	portENTER_CRITICAL();
 290              		.loc 1 195 0
 291 000c FFF7FEFF 		bl	vPortEnterCritical
 196:App/Common/Minimal/semtest.c **** 		sCheckVariableToUse = sNextCheckVariable;
 292              		.loc 1 196 0
 293 0010 3B4B     		ldr	r3, .L19
 294 0012 1B88     		ldrh	r3, [r3]	@ movhi
 295 0014 3B83     		strh	r3, [r7, #24]	@ movhi
 197:App/Common/Minimal/semtest.c **** 		sNextCheckVariable++;
 296              		.loc 1 197 0
 297 0016 3A4B     		ldr	r3, .L19
 298 0018 1B88     		ldrh	r3, [r3]	@ movhi
 299 001a 9BB2     		uxth	r3, r3
 300 001c 9BB2     		uxth	r3, r3
 301 001e 0133     		adds	r3, r3, #1
 302 0020 9AB2     		uxth	r2, r3
 303 0022 374B     		ldr	r3, .L19
 304 0024 1A80     		strh	r2, [r3]	@ movhi
 198:App/Common/Minimal/semtest.c **** 	portEXIT_CRITICAL();
 305              		.loc 1 198 0
 306 0026 FFF7FEFF 		bl	vPortExitCritical
 199:App/Common/Minimal/semtest.c **** 
 200:App/Common/Minimal/semtest.c **** 	/* A structure is passed in as the parameter.  This contains the shared 
 201:App/Common/Minimal/semtest.c **** 	variable being guarded. */
 202:App/Common/Minimal/semtest.c **** 	pxParameters = ( xSemaphoreParameters * ) pvParameters;
 307              		.loc 1 202 0
 308 002a 7B68     		ldr	r3, [r7, #4]
 309 002c 7B61     		str	r3, [r7, #20]
 203:App/Common/Minimal/semtest.c **** 	pulSharedVariable = pxParameters->pulSharedVariable;
 310              		.loc 1 203 0
 311 002e 7B69     		ldr	r3, [r7, #20]
 312 0030 5B68     		ldr	r3, [r3, #4]
 313 0032 3B61     		str	r3, [r7, #16]
 204:App/Common/Minimal/semtest.c **** 
 205:App/Common/Minimal/semtest.c **** 	/* If we are blocking we use a much higher count to ensure loads of context
 206:App/Common/Minimal/semtest.c **** 	switches occur during the count. */
 207:App/Common/Minimal/semtest.c **** 	if( pxParameters->xBlockTime > ( portTickType ) 0 )
 314              		.loc 1 207 0
 315 0034 7B69     		ldr	r3, [r7, #20]
 316 0036 9B68     		ldr	r3, [r3, #8]
 317 0038 002B     		cmp	r3, #0
 318 003a 03D0     		beq	.L9
 208:App/Common/Minimal/semtest.c **** 	{
 209:App/Common/Minimal/semtest.c **** 		ulExpectedValue = semtstBLOCKING_EXPECTED_VALUE;
 319              		.loc 1 209 0
 320 003c 40F6FF73 		movw	r3, #4095
 321 0040 FB60     		str	r3, [r7, #12]
 322 0042 01E0     		b	.L10
 323              	.L9:
 210:App/Common/Minimal/semtest.c **** 	}
 211:App/Common/Minimal/semtest.c **** 	else
 212:App/Common/Minimal/semtest.c **** 	{
 213:App/Common/Minimal/semtest.c **** 		ulExpectedValue = semtstNON_BLOCKING_EXPECTED_VALUE;
 324              		.loc 1 213 0
 325 0044 FF23     		movs	r3, #255
 326 0046 FB60     		str	r3, [r7, #12]
 327              	.L10:
 214:App/Common/Minimal/semtest.c **** 	}
 215:App/Common/Minimal/semtest.c **** 
 216:App/Common/Minimal/semtest.c **** 	for( ;; )
 217:App/Common/Minimal/semtest.c **** 	{
 218:App/Common/Minimal/semtest.c **** 		/* Try to obtain the semaphore. */
 219:App/Common/Minimal/semtest.c **** 		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
 328              		.loc 1 219 0
 329 0048 7B69     		ldr	r3, [r7, #20]
 330 004a 1A68     		ldr	r2, [r3]
 331 004c 7B69     		ldr	r3, [r7, #20]
 332 004e 9B68     		ldr	r3, [r3, #8]
 333 0050 1046     		mov	r0, r2
 334 0052 0021     		movs	r1, #0
 335 0054 1A46     		mov	r2, r3
 336 0056 0023     		movs	r3, #0
 337 0058 FFF7FEFF 		bl	xQueueGenericReceive
 338 005c 0346     		mov	r3, r0
 339 005e 012B     		cmp	r3, #1
 340 0060 45D1     		bne	.L11
 220:App/Common/Minimal/semtest.c **** 		{
 221:App/Common/Minimal/semtest.c **** 			/* We have the semaphore and so expect any other tasks using the
 222:App/Common/Minimal/semtest.c **** 			shared variable to have left it in the state we expect to find
 223:App/Common/Minimal/semtest.c **** 			it. */
 224:App/Common/Minimal/semtest.c **** 			if( *pulSharedVariable != ulExpectedValue )
 341              		.loc 1 224 0
 342 0062 3B69     		ldr	r3, [r7, #16]
 343 0064 1A68     		ldr	r2, [r3]
 344 0066 FB68     		ldr	r3, [r7, #12]
 345 0068 9A42     		cmp	r2, r3
 346 006a 01D0     		beq	.L12
 225:App/Common/Minimal/semtest.c **** 			{
 226:App/Common/Minimal/semtest.c **** 				sError = pdTRUE;
 347              		.loc 1 226 0
 348 006c 0123     		movs	r3, #1
 349 006e 7B83     		strh	r3, [r7, #26]	@ movhi
 350              	.L12:
 227:App/Common/Minimal/semtest.c **** 			}
 228:App/Common/Minimal/semtest.c **** 			
 229:App/Common/Minimal/semtest.c **** 			/* Clear the variable, then count it back up to the expected value
 230:App/Common/Minimal/semtest.c **** 			before releasing the semaphore.  Would expect a context switch or
 231:App/Common/Minimal/semtest.c **** 			two during this time. */
 232:App/Common/Minimal/semtest.c **** 			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 351              		.loc 1 232 0
 352 0070 0023     		movs	r3, #0
 353 0072 FB61     		str	r3, [r7, #28]
 354 0074 0CE0     		b	.L13
 355              	.L15:
 233:App/Common/Minimal/semtest.c **** 			{
 234:App/Common/Minimal/semtest.c **** 				*pulSharedVariable = ulCounter;
 356              		.loc 1 234 0
 357 0076 3B69     		ldr	r3, [r7, #16]
 358 0078 FA69     		ldr	r2, [r7, #28]
 359 007a 1A60     		str	r2, [r3]
 235:App/Common/Minimal/semtest.c **** 				if( *pulSharedVariable != ulCounter )
 360              		.loc 1 235 0
 361 007c 3B69     		ldr	r3, [r7, #16]
 362 007e 1A68     		ldr	r2, [r3]
 363 0080 FB69     		ldr	r3, [r7, #28]
 364 0082 9A42     		cmp	r2, r3
 365 0084 01D0     		beq	.L14
 236:App/Common/Minimal/semtest.c **** 				{
 237:App/Common/Minimal/semtest.c **** 					sError = pdTRUE;
 366              		.loc 1 237 0
 367 0086 0123     		movs	r3, #1
 368 0088 7B83     		strh	r3, [r7, #26]	@ movhi
 369              	.L14:
 232:App/Common/Minimal/semtest.c **** 			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 370              		.loc 1 232 0
 371 008a FB69     		ldr	r3, [r7, #28]
 372 008c 0133     		adds	r3, r3, #1
 373 008e FB61     		str	r3, [r7, #28]
 374              	.L13:
 232:App/Common/Minimal/semtest.c **** 			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 375              		.loc 1 232 0 is_stmt 0 discriminator 1
 376 0090 FB68     		ldr	r3, [r7, #12]
 377 0092 FA69     		ldr	r2, [r7, #28]
 378 0094 9A42     		cmp	r2, r3
 379 0096 EED9     		bls	.L15
 238:App/Common/Minimal/semtest.c **** 				}
 239:App/Common/Minimal/semtest.c **** 			}
 240:App/Common/Minimal/semtest.c **** 
 241:App/Common/Minimal/semtest.c **** 			/* Release the semaphore, and if no errors have occurred increment the check
 242:App/Common/Minimal/semtest.c **** 			variable. */
 243:App/Common/Minimal/semtest.c **** 			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
 380              		.loc 1 243 0 is_stmt 1
 381 0098 7B69     		ldr	r3, [r7, #20]
 382 009a 1B68     		ldr	r3, [r3]
 383 009c 1846     		mov	r0, r3
 384 009e 0021     		movs	r1, #0
 385 00a0 0022     		movs	r2, #0
 386 00a2 0023     		movs	r3, #0
 387 00a4 FFF7FEFF 		bl	xQueueGenericSend
 388 00a8 0346     		mov	r3, r0
 389 00aa 002B     		cmp	r3, #0
 390 00ac 01D1     		bne	.L16
 244:App/Common/Minimal/semtest.c **** 			{
 245:App/Common/Minimal/semtest.c **** 				sError = pdTRUE;
 391              		.loc 1 245 0
 392 00ae 0123     		movs	r3, #1
 393 00b0 7B83     		strh	r3, [r7, #26]	@ movhi
 394              	.L16:
 246:App/Common/Minimal/semtest.c **** 			}
 247:App/Common/Minimal/semtest.c **** 
 248:App/Common/Minimal/semtest.c **** 			if( sError == pdFALSE )
 395              		.loc 1 248 0
 396 00b2 B7F91A30 		ldrsh	r3, [r7, #26]
 397 00b6 002B     		cmp	r3, #0
 398 00b8 0FD1     		bne	.L17
 249:App/Common/Minimal/semtest.c **** 			{
 250:App/Common/Minimal/semtest.c **** 				if( sCheckVariableToUse < semtstNUM_TASKS )
 399              		.loc 1 250 0
 400 00ba B7F91830 		ldrsh	r3, [r7, #24]
 401 00be 032B     		cmp	r3, #3
 402 00c0 0BDC     		bgt	.L17
 251:App/Common/Minimal/semtest.c **** 				{
 252:App/Common/Minimal/semtest.c **** 					( sCheckVariables[ sCheckVariableToUse ] )++;
 403              		.loc 1 252 0
 404 00c2 B7F91820 		ldrsh	r2, [r7, #24]
 405 00c6 0F4B     		ldr	r3, .L19+4
 406 00c8 33F81230 		ldrh	r3, [r3, r2, lsl #1]	@ movhi
 407 00cc 9BB2     		uxth	r3, r3
 408 00ce 9BB2     		uxth	r3, r3
 409 00d0 0133     		adds	r3, r3, #1
 410 00d2 99B2     		uxth	r1, r3
 411 00d4 0B4B     		ldr	r3, .L19+4
 412 00d6 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 413              	.L17:
 253:App/Common/Minimal/semtest.c **** 				}
 254:App/Common/Minimal/semtest.c **** 			}
 255:App/Common/Minimal/semtest.c **** 
 256:App/Common/Minimal/semtest.c **** 			/* If we have a block time then we are running at a priority higher
 257:App/Common/Minimal/semtest.c **** 			than the idle priority.  This task takes a long time to complete
 258:App/Common/Minimal/semtest.c **** 			a cycle	(deliberately so to test the guarding) so will be starving
 259:App/Common/Minimal/semtest.c **** 			out lower priority tasks.  Block for some time to allow give lower
 260:App/Common/Minimal/semtest.c **** 			priority tasks some processor time. */
 261:App/Common/Minimal/semtest.c **** 			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
 414              		.loc 1 261 0
 415 00da 7B69     		ldr	r3, [r7, #20]
 416 00dc 9A68     		ldr	r2, [r3, #8]
 417 00de 1346     		mov	r3, r2
 418 00e0 9B00     		lsls	r3, r3, #2
 419 00e2 1344     		add	r3, r3, r2
 420 00e4 5B00     		lsls	r3, r3, #1
 421 00e6 1846     		mov	r0, r3
 422 00e8 FFF7FEFF 		bl	vTaskDelay
 423 00ec 06E0     		b	.L18
 424              	.L11:
 262:App/Common/Minimal/semtest.c **** 		}
 263:App/Common/Minimal/semtest.c **** 		else
 264:App/Common/Minimal/semtest.c **** 		{
 265:App/Common/Minimal/semtest.c **** 			if( pxParameters->xBlockTime == ( portTickType ) 0 )
 425              		.loc 1 265 0
 426 00ee 7B69     		ldr	r3, [r7, #20]
 427 00f0 9B68     		ldr	r3, [r3, #8]
 428 00f2 002B     		cmp	r3, #0
 429 00f4 02D1     		bne	.L18
 266:App/Common/Minimal/semtest.c **** 			{
 267:App/Common/Minimal/semtest.c **** 				/* We have not got the semaphore yet, so no point using the
 268:App/Common/Minimal/semtest.c **** 				processor.  We are not blocking when attempting to obtain the
 269:App/Common/Minimal/semtest.c **** 				semaphore. */
 270:App/Common/Minimal/semtest.c **** 				taskYIELD();
 430              		.loc 1 270 0
 431 00f6 FFF7FEFF 		bl	vPortYield
 271:App/Common/Minimal/semtest.c **** 			}
 272:App/Common/Minimal/semtest.c **** 		}
 273:App/Common/Minimal/semtest.c **** 	}
 432              		.loc 1 273 0
 433 00fa A5E7     		b	.L10
 434              	.L18:
 435 00fc A4E7     		b	.L10
 436              	.L20:
 437 00fe 00BF     		.align	2
 438              	.L19:
 439 0100 00000000 		.word	sNextCheckVariable
 440 0104 00000000 		.word	sCheckVariables
 441              		.cfi_endproc
 442              	.LFE111:
 444              		.section	.text.xAreSemaphoreTasksStillRunning,"ax",%progbits
 445              		.align	2
 446              		.global	xAreSemaphoreTasksStillRunning
 447              		.thumb
 448              		.thumb_func
 450              	xAreSemaphoreTasksStillRunning:
 451              	.LFB112:
 274:App/Common/Minimal/semtest.c **** }
 275:App/Common/Minimal/semtest.c **** /*-----------------------------------------------------------*/
 276:App/Common/Minimal/semtest.c **** 
 277:App/Common/Minimal/semtest.c **** /* This is called to check that all the created tasks are still running. */
 278:App/Common/Minimal/semtest.c **** portBASE_TYPE xAreSemaphoreTasksStillRunning( void )
 279:App/Common/Minimal/semtest.c **** {
 452              		.loc 1 279 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 457 0000 80B4     		push	{r7}
 458              	.LCFI6:
 459              		.cfi_def_cfa_offset 4
 460              		.cfi_offset 7, -4
 461 0002 83B0     		sub	sp, sp, #12
 462              	.LCFI7:
 463              		.cfi_def_cfa_offset 16
 464 0004 00AF     		add	r7, sp, #0
 465              	.LCFI8:
 466              		.cfi_def_cfa_register 7
 280:App/Common/Minimal/semtest.c **** static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
 281:App/Common/Minimal/semtest.c **** portBASE_TYPE xTask, xReturn = pdTRUE;
 467              		.loc 1 281 0
 468 0006 0123     		movs	r3, #1
 469 0008 3B60     		str	r3, [r7]
 282:App/Common/Minimal/semtest.c **** 
 283:App/Common/Minimal/semtest.c **** 	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 470              		.loc 1 283 0
 471 000a 0023     		movs	r3, #0
 472 000c 7B60     		str	r3, [r7, #4]
 473 000e 1AE0     		b	.L22
 474              	.L24:
 284:App/Common/Minimal/semtest.c **** 	{
 285:App/Common/Minimal/semtest.c **** 		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 475              		.loc 1 285 0
 476 0010 124B     		ldr	r3, .L26
 477 0012 7A68     		ldr	r2, [r7, #4]
 478 0014 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 479 0018 114B     		ldr	r3, .L26+4
 480 001a 7968     		ldr	r1, [r7, #4]
 481 001c 33F81130 		ldrh	r3, [r3, r1, lsl #1]	@ movhi
 482 0020 9BB2     		uxth	r3, r3
 483 0022 12B2     		sxth	r2, r2
 484 0024 1BB2     		sxth	r3, r3
 485 0026 9A42     		cmp	r2, r3
 486 0028 01D1     		bne	.L23
 286:App/Common/Minimal/semtest.c **** 		{
 287:App/Common/Minimal/semtest.c **** 			xReturn = pdFALSE;
 487              		.loc 1 287 0
 488 002a 0023     		movs	r3, #0
 489 002c 3B60     		str	r3, [r7]
 490              	.L23:
 288:App/Common/Minimal/semtest.c **** 		}
 289:App/Common/Minimal/semtest.c **** 
 290:App/Common/Minimal/semtest.c **** 		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
 491              		.loc 1 290 0
 492 002e 0C4B     		ldr	r3, .L26+4
 493 0030 7A68     		ldr	r2, [r7, #4]
 494 0032 33F81230 		ldrh	r3, [r3, r2, lsl #1]	@ movhi
 495 0036 99B2     		uxth	r1, r3
 496 0038 084B     		ldr	r3, .L26
 497 003a 7A68     		ldr	r2, [r7, #4]
 498 003c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 283:App/Common/Minimal/semtest.c **** 	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 499              		.loc 1 283 0
 500 0040 7B68     		ldr	r3, [r7, #4]
 501 0042 0133     		adds	r3, r3, #1
 502 0044 7B60     		str	r3, [r7, #4]
 503              	.L22:
 283:App/Common/Minimal/semtest.c **** 	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 504              		.loc 1 283 0 is_stmt 0 discriminator 1
 505 0046 7B68     		ldr	r3, [r7, #4]
 506 0048 032B     		cmp	r3, #3
 507 004a E1DD     		ble	.L24
 291:App/Common/Minimal/semtest.c **** 	}
 292:App/Common/Minimal/semtest.c **** 
 293:App/Common/Minimal/semtest.c **** 	return xReturn;
 508              		.loc 1 293 0 is_stmt 1
 509 004c 3B68     		ldr	r3, [r7]
 294:App/Common/Minimal/semtest.c **** }
 510              		.loc 1 294 0
 511 004e 1846     		mov	r0, r3
 512 0050 0C37     		adds	r7, r7, #12
 513 0052 BD46     		mov	sp, r7
 514              		@ sp needed
 515 0054 5DF8047B 		ldr	r7, [sp], #4
 516 0058 7047     		bx	lr
 517              	.L27:
 518 005a 00BF     		.align	2
 519              	.L26:
 520 005c 00000000 		.word	sLastCheckVariables.8224
 521 0060 00000000 		.word	sCheckVariables
 522              		.cfi_endproc
 523              	.LFE112:
 525              		.section	.bss.sLastCheckVariables.8224,"aw",%nobits
 526              		.align	2
 529              	sLastCheckVariables.8224:
 530 0000 00000000 		.space	8
 530      00000000 
 531              		.text
 532              	.Letext0:
 533              		.file 2 "/home/jerzy/ARMtoolchains/gcc-arm-none-eabi-4_8-2013q4/arm-none-eabi/include/stdint.h"
 534              		.file 3 "Source/portable/GCC/ARM_CM4F/portmacro.h"
 535              		.file 4 "Source/include/task.h"
 536              		.file 5 "Source/include/queue.h"
 537              		.file 6 "Source/include/semphr.h"
 538              		.file 7 "App/STM32F4-Discovery/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 semtest.c
     /tmp/ccbX6s7M.s:20     .bss.sCheckVariables:00000000 $d
     /tmp/ccbX6s7M.s:23     .bss.sCheckVariables:00000000 sCheckVariables
     /tmp/ccbX6s7M.s:26     .bss.sNextCheckVariable:00000000 $d
     /tmp/ccbX6s7M.s:29     .bss.sNextCheckVariable:00000000 sNextCheckVariable
     /tmp/ccbX6s7M.s:32     .rodata:00000000 $d
     /tmp/ccbX6s7M.s:51     .text.vStartSemaphoreTasks:00000000 $t
     /tmp/ccbX6s7M.s:56     .text.vStartSemaphoreTasks:00000000 vStartSemaphoreTasks
     /tmp/ccbX6s7M.s:254    .text.vStartSemaphoreTasks:0000014c $d
     /tmp/ccbX6s7M.s:269    .text.prvSemaphoreTest:00000000 prvSemaphoreTest
     /tmp/ccbX6s7M.s:265    .text.prvSemaphoreTest:00000000 $t
     /tmp/ccbX6s7M.s:439    .text.prvSemaphoreTest:00000100 $d
     /tmp/ccbX6s7M.s:445    .text.xAreSemaphoreTasksStillRunning:00000000 $t
     /tmp/ccbX6s7M.s:450    .text.xAreSemaphoreTasksStillRunning:00000000 xAreSemaphoreTasksStillRunning
     /tmp/ccbX6s7M.s:520    .text.xAreSemaphoreTasksStillRunning:0000005c $d
     /tmp/ccbX6s7M.s:529    .bss.sLastCheckVariables.8224:00000000 sLastCheckVariables.8224
     /tmp/ccbX6s7M.s:526    .bss.sLastCheckVariables.8224:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
xQueueGenericCreate
xQueueGenericSend
xTaskGenericCreate
vQueueAddToRegistry
vPortEnterCritical
vPortExitCritical
xQueueGenericReceive
vTaskDelay
vPortYield
