
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb4  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08002d3c  08002d3c  0000ad3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08002d44  08002d44  0000ad44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000448  20000000  08002d48  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00012d70  20000448  08003190  00010448  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200131b8  08015f00  00010448  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
  8 .debug_info   000062bf  00000000  00000000  00010476  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001627  00000000  00000000  00016735  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002aec  00000000  00000000  00017d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007e8  00000000  00000000  0001a848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006f8  00000000  00000000  0001b030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000032d8  00000000  00000000  0001b728  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002ec2  00000000  00000000  0001ea00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  000218c2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001b08  00000000  00000000  00021934  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000448 	.word	0x20000448
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d24 	.word	0x08002d24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002d24 	.word	0x08002d24
 80001d0:	2000044c 	.word	0x2000044c
 80001d4:	20000448 	.word	0x20000448
 80001d8:	00000000 	.word	0x00000000

080001dc <memcpy>:
 80001dc:	4684      	mov	ip, r0
 80001de:	ea41 0300 	orr.w	r3, r1, r0
 80001e2:	f013 0303 	ands.w	r3, r3, #3
 80001e6:	d16d      	bne.n	80002c4 <memcpy+0xe8>
 80001e8:	3a40      	subs	r2, #64	; 0x40
 80001ea:	d341      	bcc.n	8000270 <memcpy+0x94>
 80001ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f0:	f840 3b04 	str.w	r3, [r0], #4
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	3a40      	subs	r2, #64	; 0x40
 800026e:	d2bd      	bcs.n	80001ec <memcpy+0x10>
 8000270:	3230      	adds	r2, #48	; 0x30
 8000272:	d311      	bcc.n	8000298 <memcpy+0xbc>
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	3a10      	subs	r2, #16
 8000296:	d2ed      	bcs.n	8000274 <memcpy+0x98>
 8000298:	320c      	adds	r2, #12
 800029a:	d305      	bcc.n	80002a8 <memcpy+0xcc>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	3a04      	subs	r2, #4
 80002a6:	d2f9      	bcs.n	800029c <memcpy+0xc0>
 80002a8:	3204      	adds	r2, #4
 80002aa:	d008      	beq.n	80002be <memcpy+0xe2>
 80002ac:	07d2      	lsls	r2, r2, #31
 80002ae:	bf1c      	itt	ne
 80002b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002b8:	d301      	bcc.n	80002be <memcpy+0xe2>
 80002ba:	880b      	ldrh	r3, [r1, #0]
 80002bc:	8003      	strh	r3, [r0, #0]
 80002be:	4660      	mov	r0, ip
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2a08      	cmp	r2, #8
 80002c6:	d313      	bcc.n	80002f0 <memcpy+0x114>
 80002c8:	078b      	lsls	r3, r1, #30
 80002ca:	d08d      	beq.n	80001e8 <memcpy+0xc>
 80002cc:	f010 0303 	ands.w	r3, r0, #3
 80002d0:	d08a      	beq.n	80001e8 <memcpy+0xc>
 80002d2:	f1c3 0304 	rsb	r3, r3, #4
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	bf1c      	itt	ne
 80002dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002e4:	d380      	bcc.n	80001e8 <memcpy+0xc>
 80002e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ea:	f820 3b02 	strh.w	r3, [r0], #2
 80002ee:	e77b      	b.n	80001e8 <memcpy+0xc>
 80002f0:	3a04      	subs	r2, #4
 80002f2:	d3d9      	bcc.n	80002a8 <memcpy+0xcc>
 80002f4:	3a01      	subs	r2, #1
 80002f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002fa:	f800 3b01 	strb.w	r3, [r0], #1
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0x118>
 8000300:	780b      	ldrb	r3, [r1, #0]
 8000302:	7003      	strb	r3, [r0, #0]
 8000304:	784b      	ldrb	r3, [r1, #1]
 8000306:	7043      	strb	r3, [r0, #1]
 8000308:	788b      	ldrb	r3, [r1, #2]
 800030a:	7083      	strb	r3, [r0, #2]
 800030c:	4660      	mov	r0, ip
 800030e:	4770      	bx	lr

08000310 <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <NVIC_SetPendingIRQ+0x30>)
 800031c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000320:	0952      	lsrs	r2, r2, #5
 8000322:	79f9      	ldrb	r1, [r7, #7]
 8000324:	f001 011f 	and.w	r1, r1, #31
 8000328:	2001      	movs	r0, #1
 800032a:	fa00 f101 	lsl.w	r1, r0, r1
 800032e:	3240      	adds	r2, #64	; 0x40
 8000330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000e100 	.word	0xe000e100

08000344 <main>:
volatile unsigned long ulButtonPressCounts = 0UL;

/*-----------------------------------------------------------*/

int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	/* Configure the hardware ready to run the test. */
	prvSetupHardware();
 8000348:	f000 f806 	bl	8000358 <prvSetupHardware>
	/* Start standard demo/test application flash tasks.  See the comments at
	the top of this file.  The LED flash tasks are always created.  The other
	tasks are only created if mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to
	0 (at the top of this file).  See the comments at the top of this file for
	more information. */
	vStartLEDFlashTasks( mainFLASH_TASK_PRIORITY );
 800034c:	2001      	movs	r0, #1
 800034e:	f002 f8d5 	bl	80024fc <vStartLEDFlashTasks>
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	//prvOptionallyCreateComprehensveTestApplication();

	/* Start the scheduler. */
	vTaskStartScheduler();
 8000352:	f000 faa1 	bl	8000898 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8000356:	e7fe      	b.n	8000356 <main+0x12>

08000358 <prvSetupHardware>:
	}
}
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 800035c:	f000 f8e2 	bl	8000524 <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8000360:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000364:	f002 f964 	bl	8002630 <NVIC_PriorityGroupConfig>

	/* Setup the LED outputs. */
	vParTestInitialise();
 8000368:	f000 f882 	bl	8000470 <vParTestInitialise>

	/* Configure the button input.  This configures the interrupt to use the
	lowest interrupt priority, so it is ok to use the ISR safe FreeRTOS API
	from the button interrupt handler. */
	//STM_EVAL_PBInit( BUTTON_USER, BUTTON_MODE_EXTI );
}
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop

08000370 <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <vApplicationTickHook+0x20>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	1c5a      	adds	r2, r3, #1
 800037a:	4b05      	ldr	r3, [pc, #20]	; (8000390 <vApplicationTickHook+0x20>)
 800037c:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 800037e:	201c      	movs	r0, #28
 8000380:	f7ff ffc6 	bl	8000310 <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 8000384:	4b02      	ldr	r3, [pc, #8]	; (8000390 <vApplicationTickHook+0x20>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	1e5a      	subs	r2, r3, #1
 800038a:	4b01      	ldr	r3, [pc, #4]	; (8000390 <vApplicationTickHook+0x20>)
 800038c:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000464 	.word	0x20000464

08000394 <TIM3_IRQHandler>:
	NVIC_Init( &NVIC_InitStructure );
}
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <TIM3_IRQHandler+0x34>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	1c5a      	adds	r2, r3, #1
 800039e:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <TIM3_IRQHandler+0x34>)
 80003a0:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <TIM3_IRQHandler+0x34>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <TIM3_IRQHandler+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d903      	bls.n	80003b6 <TIM3_IRQHandler+0x22>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <TIM3_IRQHandler+0x34>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <TIM3_IRQHandler+0x38>)
 80003b4:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <TIM3_IRQHandler+0x34>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	1e5a      	subs	r2, r3, #1
 80003bc:	4b02      	ldr	r3, [pc, #8]	; (80003c8 <TIM3_IRQHandler+0x34>)
 80003be:	601a      	str	r2, [r3, #0]
}
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	20000464 	.word	0x20000464
 80003cc:	20000468 	.word	0x20000468

080003d0 <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <TIM2_IRQHandler+0x20>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <TIM2_IRQHandler+0x20>)
 80003dc:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 80003de:	201d      	movs	r0, #29
 80003e0:	f7ff ff96 	bl	8000310 <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 80003e4:	4b02      	ldr	r3, [pc, #8]	; (80003f0 <TIM2_IRQHandler+0x20>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	1e5a      	subs	r2, r3, #1
 80003ea:	4b01      	ldr	r3, [pc, #4]	; (80003f0 <TIM2_IRQHandler+0x20>)
 80003ec:	601a      	str	r2, [r3, #0]
}
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000464 	.word	0x20000464

080003f4 <EXTI9_5_IRQHandler>:
	#endif /* mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY */
}
/*-----------------------------------------------------------*/

void EXTI9_5_IRQHandler(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
long lHigherPriorityTaskWoken = pdFALSE;
 80003fa:	2300      	movs	r3, #0
 80003fc:	607b      	str	r3, [r7, #4]

	/* Only line 6 is enabled, so there is no need to test which line generated
	the interrupt. */
	EXTI_ClearITPendingBit( EXTI_Line6 );
 80003fe:	2040      	movs	r0, #64	; 0x40
 8000400:	f002 f940 	bl	8002684 <EXTI_ClearITPendingBit>

	/* This interrupt does nothing more than demonstrate how to synchronise a
	task with an interrupt.  First the handler releases a semaphore.
	lHigherPriorityTaskWoken has been initialised to zero. */
	xSemaphoreGiveFromISR( xTestSemaphore, &lHigherPriorityTaskWoken );
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <EXTI9_5_IRQHandler+0x38>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	4610      	mov	r0, r2
 800040c:	2100      	movs	r1, #0
 800040e:	461a      	mov	r2, r3
 8000410:	2300      	movs	r3, #0
 8000412:	f001 f8f9 	bl	8001608 <xQueueGenericSendFromISR>
	semaphore caused the task to unblock, and the unblocked task has a priority
	higher than the currently executing task (the task that this interrupt
	interrupted), then lHigherPriorityTaskWoken will have been set to pdTRUE.
	Passing pdTRUE into the following macro call will cause this interrupt to
	return directly to the unblocked, higher priority, task. */
	portEND_SWITCHING_ISR( lHigherPriorityTaskWoken );
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d003      	beq.n	8000424 <EXTI9_5_IRQHandler+0x30>
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <EXTI9_5_IRQHandler+0x3c>)
 800041e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000422:	601a      	str	r2, [r3, #0]
}
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	2000046c 	.word	0x2000046c
 8000430:	e000ed04 	.word	0xe000ed04

08000434 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 8000438:	f001 fcf6 	bl	8001e28 <ulPortSetInterruptMask>
	for( ;; );
 800043c:	e7fe      	b.n	800043c <vApplicationMallocFailedHook+0x8>
 800043e:	bf00      	nop

08000440 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 8000456:	f001 fce7 	bl	8001e28 <ulPortSetInterruptMask>
	for( ;; );
 800045a:	e7fe      	b.n	800045a <vApplicationStackOverflowHook+0xe>

0800045c <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]

}
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <vParTestInitialise>:
static const Led_TypeDef xLEDs[ partstMAX_LEDS ] = { LED3, LED4, LED5, LED6 };

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	/* Initialise all four LEDs that are built onto the starter kit. */
	STM_EVAL_LEDInit( LED3 );
 8000474:	2001      	movs	r0, #1
 8000476:	f002 f88f 	bl	8002598 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED4 );
 800047a:	2000      	movs	r0, #0
 800047c:	f002 f88c 	bl	8002598 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED5 );
 8000480:	2002      	movs	r0, #2
 8000482:	f002 f889 	bl	8002598 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED6 );
 8000486:	2003      	movs	r0, #3
 8000488:	f002 f886 	bl	8002598 <STM_EVAL_LEDInit>
}
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop

08000490 <vParTestToggleLED>:
	}
}
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned long ulLED )
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	if( ulLED < partstMAX_LEDS )
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b03      	cmp	r3, #3
 800049c:	d80a      	bhi.n	80004b4 <vParTestToggleLED+0x24>
	{
		taskENTER_CRITICAL();
 800049e:	f001 fca1 	bl	8001de4 <vPortEnterCritical>
		{
			STM_EVAL_LEDToggle( xLEDs[ ulLED ] );
 80004a2:	4a06      	ldr	r2, [pc, #24]	; (80004bc <vParTestToggleLED+0x2c>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4413      	add	r3, r2
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f002 f8a2 	bl	80025f4 <STM_EVAL_LEDToggle>
		}
		taskEXIT_CRITICAL();
 80004b0:	f001 fca8 	bl	8001e04 <vPortExitCritical>
	}
}
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	08002cec 	.word	0x08002cec

080004c0 <Reset_Handler>:
 80004c0:	2100      	movs	r1, #0
 80004c2:	f000 b804 	b.w	80004ce <LoopCopyDataInit>

080004c6 <CopyDataInit>:
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <LoopFillZerobss+0x22>)
 80004c8:	585b      	ldr	r3, [r3, r1]
 80004ca:	5043      	str	r3, [r0, r1]
 80004cc:	3104      	adds	r1, #4

080004ce <LoopCopyDataInit>:
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <LoopFillZerobss+0x26>)
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <LoopFillZerobss+0x2a>)
 80004d2:	1842      	adds	r2, r0, r1
 80004d4:	429a      	cmp	r2, r3
 80004d6:	f4ff aff6 	bcc.w	80004c6 <CopyDataInit>
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <LoopFillZerobss+0x2e>)
 80004dc:	f000 b803 	b.w	80004e6 <LoopFillZerobss>

080004e0 <FillZerobss>:
 80004e0:	2300      	movs	r3, #0
 80004e2:	f842 3b04 	str.w	r3, [r2], #4

080004e6 <LoopFillZerobss>:
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <LoopFillZerobss+0x32>)
 80004e8:	429a      	cmp	r2, r3
 80004ea:	f4ff aff9 	bcc.w	80004e0 <FillZerobss>
 80004ee:	480b      	ldr	r0, [pc, #44]	; (800051c <LoopFillZerobss+0x36>)
 80004f0:	6801      	ldr	r1, [r0, #0]
 80004f2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f6:	6001      	str	r1, [r0, #0]
 80004f8:	f000 f814 	bl	8000524 <SystemInit>
 80004fc:	f002 fa2c 	bl	8002958 <__libc_init_array>
 8000500:	f7ff ff20 	bl	8000344 <main>
 8000504:	4770      	bx	lr
 8000506:	0000      	.short	0x0000
 8000508:	08002d48 	.word	0x08002d48
 800050c:	20000000 	.word	0x20000000
 8000510:	20000448 	.word	0x20000448
 8000514:	20000448 	.word	0x20000448
 8000518:	200131b8 	.word	0x200131b8
 800051c:	e000ed88 	.word	0xe000ed88

08000520 <ADC_IRQHandler>:
 8000520:	f7ff bffe 	b.w	8000520 <ADC_IRQHandler>

08000524 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <SystemInit+0x5c>)
 800052a:	4a15      	ldr	r2, [pc, #84]	; (8000580 <SystemInit+0x5c>)
 800052c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000530:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <SystemInit+0x60>)
 800053a:	4a12      	ldr	r2, [pc, #72]	; (8000584 <SystemInit+0x60>)
 800053c:	6812      	ldr	r2, [r2, #0]
 800053e:	f042 0201 	orr.w	r2, r2, #1
 8000542:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <SystemInit+0x60>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <SystemInit+0x60>)
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <SystemInit+0x60>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000558:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <SystemInit+0x60>)
 800055c:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <SystemInit+0x64>)
 800055e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SystemInit+0x60>)
 8000562:	4a08      	ldr	r2, [pc, #32]	; (8000584 <SystemInit+0x60>)
 8000564:	6812      	ldr	r2, [r2, #0]
 8000566:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800056a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <SystemInit+0x60>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000572:	f000 f80b 	bl	800058c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000576:	4b02      	ldr	r3, [pc, #8]	; (8000580 <SystemInit+0x5c>)
 8000578:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800057c:	609a      	str	r2, [r3, #8]
#endif
}
 800057e:	bd80      	pop	{r7, pc}
 8000580:	e000ed00 	.word	0xe000ed00
 8000584:	40023800 	.word	0x40023800
 8000588:	24003010 	.word	0x24003010

0800058c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800059a:	4b35      	ldr	r3, [pc, #212]	; (8000670 <SetSysClock+0xe4>)
 800059c:	4a34      	ldr	r2, [pc, #208]	; (8000670 <SetSysClock+0xe4>)
 800059e:	6812      	ldr	r2, [r2, #0]
 80005a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005a4:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80005a6:	4b32      	ldr	r3, [pc, #200]	; (8000670 <SetSysClock+0xe4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ae:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3301      	adds	r3, #1
 80005b4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d103      	bne.n	80005c4 <SetSysClock+0x38>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005c2:	d1f0      	bne.n	80005a6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <SetSysClock+0xe4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80005d0:	2301      	movs	r3, #1
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	e001      	b.n	80005da <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d142      	bne.n	8000666 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <SetSysClock+0xe4>)
 80005e2:	4a23      	ldr	r2, [pc, #140]	; (8000670 <SetSysClock+0xe4>)
 80005e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80005e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005ea:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <SetSysClock+0xe8>)
 80005ee:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SetSysClock+0xe8>)
 80005f0:	6812      	ldr	r2, [r2, #0]
 80005f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005f6:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <SetSysClock+0xe4>)
 80005fa:	4a1d      	ldr	r2, [pc, #116]	; (8000670 <SetSysClock+0xe4>)
 80005fc:	6892      	ldr	r2, [r2, #8]
 80005fe:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <SetSysClock+0xe4>)
 8000602:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <SetSysClock+0xe4>)
 8000604:	6892      	ldr	r2, [r2, #8]
 8000606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800060a:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <SetSysClock+0xe4>)
 800060e:	4a18      	ldr	r2, [pc, #96]	; (8000670 <SetSysClock+0xe4>)
 8000610:	6892      	ldr	r2, [r2, #8]
 8000612:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000616:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <SetSysClock+0xe4>)
 800061a:	4a17      	ldr	r2, [pc, #92]	; (8000678 <SetSysClock+0xec>)
 800061c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <SetSysClock+0xe4>)
 8000620:	4a13      	ldr	r2, [pc, #76]	; (8000670 <SetSysClock+0xe4>)
 8000622:	6812      	ldr	r2, [r2, #0]
 8000624:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000628:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800062a:	bf00      	nop
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <SetSysClock+0xe4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0f9      	beq.n	800062c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <SetSysClock+0xf0>)
 800063a:	f240 6204 	movw	r2, #1540	; 0x604
 800063e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <SetSysClock+0xe4>)
 8000642:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <SetSysClock+0xe4>)
 8000644:	6892      	ldr	r2, [r2, #8]
 8000646:	f022 0203 	bic.w	r2, r2, #3
 800064a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <SetSysClock+0xe4>)
 800064e:	4a08      	ldr	r2, [pc, #32]	; (8000670 <SetSysClock+0xe4>)
 8000650:	6892      	ldr	r2, [r2, #8]
 8000652:	f042 0202 	orr.w	r2, r2, #2
 8000656:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000658:	bf00      	nop
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <SetSysClock+0xe4>)
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	f003 030c 	and.w	r3, r3, #12
 8000662:	2b08      	cmp	r3, #8
 8000664:	d1f9      	bne.n	800065a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000
 8000678:	07404b19 	.word	0x07404b19
 800067c:	40023c00 	.word	0x40023c00

08000680 <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af02      	add	r7, sp, #8
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4613      	mov	r3, r2
 800068e:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d102      	bne.n	800069c <xTaskGenericCreate+0x1c>
 8000696:	f001 fbc7 	bl	8001e28 <ulPortSetInterruptMask>
 800069a:	e7fe      	b.n	800069a <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 800069c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069e:	2b04      	cmp	r3, #4
 80006a0:	d902      	bls.n	80006a8 <xTaskGenericCreate+0x28>
 80006a2:	f001 fbc1 	bl	8001e28 <ulPortSetInterruptMask>
 80006a6:	e7fe      	b.n	80006a6 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	4618      	mov	r0, r3
 80006ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80006ae:	f000 fd59 	bl	8001164 <prvAllocateTCBAndStack>
 80006b2:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d072      	beq.n	80007a0 <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 80006ba:	69bb      	ldr	r3, [r7, #24]
 80006bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006c4:	3b01      	subs	r3, #1
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	f023 0307 	bic.w	r3, r3, #7
 80006d2:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d002      	beq.n	80006e4 <xTaskGenericCreate+0x64>
 80006de:	f001 fba3 	bl	8001e28 <ulPortSetInterruptMask>
 80006e2:	e7fe      	b.n	80006e2 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	69b8      	ldr	r0, [r7, #24]
 80006ea:	68b9      	ldr	r1, [r7, #8]
 80006ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f0:	f000 fc42 	bl	8000f78 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80006f4:	6978      	ldr	r0, [r7, #20]
 80006f6:	68f9      	ldr	r1, [r7, #12]
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	f001 faa3 	bl	8001c44 <pxPortInitialiseStack>
 80006fe:	4602      	mov	r2, r0
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8000704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 800070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	601a      	str	r2, [r3, #0]
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8000710:	f001 fb68 	bl	8001de4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <xTaskGenericCreate+0x150>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <xTaskGenericCreate+0x150>)
 800071c:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 800071e:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <xTaskGenericCreate+0x154>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d109      	bne.n	800073a <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <xTaskGenericCreate+0x154>)
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <xTaskGenericCreate+0x150>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d10f      	bne.n	8000754 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8000734:	f000 fc68 	bl	8001008 <prvInitialiseTaskLists>
 8000738:	e00c      	b.n	8000754 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <xTaskGenericCreate+0x158>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d108      	bne.n	8000754 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8000742:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <xTaskGenericCreate+0x154>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074a:	429a      	cmp	r2, r3
 800074c:	d802      	bhi.n	8000754 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <xTaskGenericCreate+0x154>)
 8000750:	69ba      	ldr	r2, [r7, #24]
 8000752:	601a      	str	r2, [r3, #0]
					}
				}
			}

			uxTaskNumber++;
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <xTaskGenericCreate+0x15c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	1c5a      	adds	r2, r3, #1
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <xTaskGenericCreate+0x15c>)
 800075c:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <xTaskGenericCreate+0x15c>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <xTaskGenericCreate+0x160>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	429a      	cmp	r2, r3
 8000770:	d903      	bls.n	800077a <xTaskGenericCreate+0xfa>
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <xTaskGenericCreate+0x160>)
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800077e:	4613      	mov	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <xTaskGenericCreate+0x164>)
 8000788:	441a      	add	r2, r3
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	3304      	adds	r3, #4
 800078e:	4610      	mov	r0, r2
 8000790:	4619      	mov	r1, r3
 8000792:	f001 f9d1 	bl	8001b38 <vListInsertEnd>

			xReturn = pdPASS;
 8000796:	2301      	movs	r3, #1
 8000798:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800079a:	f001 fb33 	bl	8001e04 <vPortExitCritical>
 800079e:	e002      	b.n	80007a6 <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d10b      	bne.n	80007c4 <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <xTaskGenericCreate+0x158>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d007      	beq.n	80007c4 <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <xTaskGenericCreate+0x154>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007bc:	429a      	cmp	r2, r3
 80007be:	d201      	bcs.n	80007c4 <xTaskGenericCreate+0x144>
			{
				portYIELD_WITHIN_API();
 80007c0:	f001 fb00 	bl	8001dc4 <vPortYield>
			}
		}
	}

	return xReturn;
 80007c4:	69fb      	ldr	r3, [r7, #28]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000548 	.word	0x20000548
 80007d4:	20000470 	.word	0x20000470
 80007d8:	20000554 	.word	0x20000554
 80007dc:	20000568 	.word	0x20000568
 80007e0:	20000550 	.word	0x20000550
 80007e4:	20000474 	.word	0x20000474

080007e8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d102      	bne.n	8000802 <vTaskDelayUntil+0x1a>
 80007fc:	f001 fb14 	bl	8001e28 <ulPortSetInterruptMask>
 8000800:	e7fe      	b.n	8000800 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <vTaskDelayUntil+0x26>
 8000808:	f001 fb0e 	bl	8001e28 <ulPortSetInterruptMask>
 800080c:	e7fe      	b.n	800080c <vTaskDelayUntil+0x24>

		vTaskSuspendAll();
 800080e:	f000 f87b 	bl	8000908 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <vTaskDelayUntil+0xa8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	4413      	add	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	429a      	cmp	r2, r3
 800082a:	d90b      	bls.n	8000844 <vTaskDelayUntil+0x5c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	429a      	cmp	r2, r3
 8000834:	d911      	bls.n	800085a <vTaskDelayUntil+0x72>
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	429a      	cmp	r2, r3
 800083c:	d90d      	bls.n	800085a <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 800083e:	2301      	movs	r3, #1
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	e00a      	b.n	800085a <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	429a      	cmp	r2, r3
 800084c:	d803      	bhi.n	8000856 <vTaskDelayUntil+0x6e>
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	429a      	cmp	r2, r3
 8000854:	d901      	bls.n	800085a <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 8000856:	2301      	movs	r3, #1
 8000858:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d008      	beq.n	8000878 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <vTaskDelayUntil+0xac>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3304      	adds	r3, #4
 800086c:	4618      	mov	r0, r3
 800086e:	f001 f9bf 	bl	8001bf0 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f000 fc40 	bl	80010f8 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8000878:	f000 f854 	bl	8000924 <xTaskResumeAll>
 800087c:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
 8000884:	f001 fa9e 	bl	8001dc4 <vPortYield>
		}
	}
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000054c 	.word	0x2000054c
 8000894:	20000470 	.word	0x20000470

08000898 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800089e:	2300      	movs	r3, #0
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2300      	movs	r3, #0
 80008a4:	9301      	str	r3, [sp, #4]
 80008a6:	2300      	movs	r3, #0
 80008a8:	9302      	str	r3, [sp, #8]
 80008aa:	2300      	movs	r3, #0
 80008ac:	9303      	str	r3, [sp, #12]
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <vTaskStartScheduler+0x60>)
 80008b0:	4912      	ldr	r1, [pc, #72]	; (80008fc <vTaskStartScheduler+0x64>)
 80008b2:	2282      	movs	r2, #130	; 0x82
 80008b4:	2300      	movs	r3, #0
 80008b6:	f7ff fee3 	bl	8000680 <xTaskGenericCreate>
 80008ba:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d102      	bne.n	80008c8 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 80008c2:	f001 fb4b 	bl	8001f5c <xTimerCreateTimerTask>
 80008c6:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d10a      	bne.n	80008e4 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80008ce:	f001 faab 	bl	8001e28 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <vTaskStartScheduler+0x68>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <vTaskStartScheduler+0x6c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80008de:	f001 fa0b 	bl	8001cf8 <xPortStartScheduler>
 80008e2:	e005      	b.n	80008f0 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d102      	bne.n	80008f0 <vTaskStartScheduler+0x58>
 80008ea:	f001 fa9d 	bl	8001e28 <ulPortSetInterruptMask>
 80008ee:	e7fe      	b.n	80008ee <vTaskStartScheduler+0x56>
	}
}
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08000f55 	.word	0x08000f55
 80008fc:	08002b9c 	.word	0x08002b9c
 8000900:	20000554 	.word	0x20000554
 8000904:	2000054c 	.word	0x2000054c

08000908 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <vTaskSuspendAll+0x18>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	4b03      	ldr	r3, [pc, #12]	; (8000920 <vTaskSuspendAll+0x18>)
 8000914:	601a      	str	r2, [r3, #0]
}
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000558 	.word	0x20000558

08000924 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800092e:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <xTaskResumeAll+0xec>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d102      	bne.n	800093c <xTaskResumeAll+0x18>
 8000936:	f001 fa77 	bl	8001e28 <ulPortSetInterruptMask>
 800093a:	e7fe      	b.n	800093a <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800093c:	f001 fa52 	bl	8001de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000940:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <xTaskResumeAll+0xec>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	1e5a      	subs	r2, r3, #1
 8000946:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <xTaskResumeAll+0xec>)
 8000948:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <xTaskResumeAll+0xec>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d156      	bne.n	8000a00 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8000952:	4b30      	ldr	r3, [pc, #192]	; (8000a14 <xTaskResumeAll+0xf0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d052      	beq.n	8000a00 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800095a:	e02f      	b.n	80009bc <xTaskResumeAll+0x98>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800095c:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <xTaskResumeAll+0xf4>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	3318      	adds	r3, #24
 8000968:	4618      	mov	r0, r3
 800096a:	f001 f941 	bl	8001bf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	3304      	adds	r3, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f93c 	bl	8001bf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800097c:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <xTaskResumeAll+0xf8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	d903      	bls.n	800098c <xTaskResumeAll+0x68>
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <xTaskResumeAll+0xf8>)
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000990:	4613      	mov	r3, r2
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	4413      	add	r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <xTaskResumeAll+0xfc>)
 800099a:	441a      	add	r2, r3
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	3304      	adds	r3, #4
 80009a0:	4610      	mov	r0, r2
 80009a2:	4619      	mov	r1, r3
 80009a4:	f001 f8c8 	bl	8001b38 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <xTaskResumeAll+0x100>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d302      	bcc.n	80009bc <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <xTaskResumeAll+0x104>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <xTaskResumeAll+0xf4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1cb      	bne.n	800095c <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <xTaskResumeAll+0x108>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d011      	beq.n	80009f0 <xTaskResumeAll+0xcc>
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 80009cc:	e00c      	b.n	80009e8 <xTaskResumeAll+0xc4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 80009ce:	f000 f841 	bl	8000a54 <xTaskIncrementTick>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <xTaskResumeAll+0x104>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
						}
						--uxPendedTicks;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <xTaskResumeAll+0x108>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <xTaskResumeAll+0x108>)
 80009e6:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <xTaskResumeAll+0x108>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1ee      	bne.n	80009ce <xTaskResumeAll+0xaa>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <xTaskResumeAll+0x104>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d103      	bne.n	8000a00 <xTaskResumeAll+0xdc>
				{
					xAlreadyYielded = pdTRUE;
 80009f8:	2301      	movs	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
					portYIELD_WITHIN_API();
 80009fc:	f001 f9e2 	bl	8001dc4 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8000a00:	f001 fa00 	bl	8001e04 <vPortExitCritical>

	return xAlreadyYielded;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000558 	.word	0x20000558
 8000a14:	20000548 	.word	0x20000548
 8000a18:	20000508 	.word	0x20000508
 8000a1c:	20000550 	.word	0x20000550
 8000a20:	20000474 	.word	0x20000474
 8000a24:	20000470 	.word	0x20000470
 8000a28:	20000560 	.word	0x20000560
 8000a2c:	2000055c 	.word	0x2000055c

08000a30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8000a36:	f001 f9d5 	bl	8001de4 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <xTaskGetTickCount+0x20>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8000a40:	f001 f9e0 	bl	8001e04 <vPortExitCritical>

	return xTicks;
 8000a44:	687b      	ldr	r3, [r7, #4]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000054c 	.word	0x2000054c

08000a54 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8000a5e:	4b5d      	ldr	r3, [pc, #372]	; (8000bd4 <xTaskIncrementTick+0x180>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f040 80a4 	bne.w	8000bb0 <xTaskIncrementTick+0x15c>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8000a68:	4b5b      	ldr	r3, [pc, #364]	; (8000bd8 <xTaskIncrementTick+0x184>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	4b5a      	ldr	r3, [pc, #360]	; (8000bd8 <xTaskIncrementTick+0x184>)
 8000a70:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8000a72:	4b59      	ldr	r3, [pc, #356]	; (8000bd8 <xTaskIncrementTick+0x184>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( portTickType ) 0U )
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d12e      	bne.n	8000adc <xTaskIncrementTick+0x88>
			{
				taskSWITCH_DELAYED_LISTS();
 8000a7e:	4b57      	ldr	r3, [pc, #348]	; (8000bdc <xTaskIncrementTick+0x188>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <xTaskIncrementTick+0x3a>
 8000a88:	f001 f9ce 	bl	8001e28 <ulPortSetInterruptMask>
 8000a8c:	e7fe      	b.n	8000a8c <xTaskIncrementTick+0x38>
 8000a8e:	4b53      	ldr	r3, [pc, #332]	; (8000bdc <xTaskIncrementTick+0x188>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4b52      	ldr	r3, [pc, #328]	; (8000be0 <xTaskIncrementTick+0x18c>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b50      	ldr	r3, [pc, #320]	; (8000bdc <xTaskIncrementTick+0x188>)
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	4b50      	ldr	r3, [pc, #320]	; (8000be0 <xTaskIncrementTick+0x18c>)
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <xTaskIncrementTick+0x190>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	4b4e      	ldr	r3, [pc, #312]	; (8000be4 <xTaskIncrementTick+0x190>)
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	4b4b      	ldr	r3, [pc, #300]	; (8000bdc <xTaskIncrementTick+0x188>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <xTaskIncrementTick+0x66>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <xTaskIncrementTick+0x68>
 8000aba:	2300      	movs	r3, #0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d004      	beq.n	8000aca <xTaskIncrementTick+0x76>
 8000ac0:	4b49      	ldr	r3, [pc, #292]	; (8000be8 <xTaskIncrementTick+0x194>)
 8000ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	e008      	b.n	8000adc <xTaskIncrementTick+0x88>
 8000aca:	4b44      	ldr	r3, [pc, #272]	; (8000bdc <xTaskIncrementTick+0x188>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <xTaskIncrementTick+0x194>)
 8000ada:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8000adc:	4b42      	ldr	r3, [pc, #264]	; (8000be8 <xTaskIncrementTick+0x194>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d34f      	bcc.n	8000b86 <xTaskIncrementTick+0x132>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ae6:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <xTaskIncrementTick+0x188>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d101      	bne.n	8000af4 <xTaskIncrementTick+0xa0>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <xTaskIncrementTick+0xa2>
 8000af4:	2300      	movs	r3, #0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d004      	beq.n	8000b04 <xTaskIncrementTick+0xb0>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8000afa:	4b3b      	ldr	r3, [pc, #236]	; (8000be8 <xTaskIncrementTick+0x194>)
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	601a      	str	r2, [r3, #0]
						break;
 8000b02:	e040      	b.n	8000b86 <xTaskIncrementTick+0x132>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <xTaskIncrementTick+0x188>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d203      	bcs.n	8000b24 <xTaskIncrementTick+0xd0>
						{
							/* It is not time to unblock this item yet, but the item
							value is the time at which the task at the head of the
							blocked list must be removed from the Blocked state -
							so record the item value in xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8000b1c:	4b32      	ldr	r3, [pc, #200]	; (8000be8 <xTaskIncrementTick+0x194>)
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	601a      	str	r2, [r3, #0]
							break;
 8000b22:	e030      	b.n	8000b86 <xTaskIncrementTick+0x132>
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	3304      	adds	r3, #4
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 f861 	bl	8001bf0 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d004      	beq.n	8000b40 <xTaskIncrementTick+0xec>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	3318      	adds	r3, #24
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 f858 	bl	8001bf0 <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b44:	4b29      	ldr	r3, [pc, #164]	; (8000bec <xTaskIncrementTick+0x198>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d903      	bls.n	8000b54 <xTaskIncrementTick+0x100>
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b50:	4b26      	ldr	r3, [pc, #152]	; (8000bec <xTaskIncrementTick+0x198>)
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b58:	4613      	mov	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <xTaskIncrementTick+0x19c>)
 8000b62:	441a      	add	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	3304      	adds	r3, #4
 8000b68:	4610      	mov	r0, r2
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f000 ffe4 	bl	8001b38 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <xTaskIncrementTick+0x1a0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d302      	bcc.n	8000b84 <xTaskIncrementTick+0x130>
							{
								xSwitchRequired = pdTRUE;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8000b82:	e7b0      	b.n	8000ae6 <xTaskIncrementTick+0x92>
 8000b84:	e7af      	b.n	8000ae6 <xTaskIncrementTick+0x92>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <xTaskIncrementTick+0x1a0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b8c:	4918      	ldr	r1, [pc, #96]	; (8000bf0 <xTaskIncrementTick+0x19c>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d901      	bls.n	8000ba2 <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
		
		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <xTaskIncrementTick+0x1a4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d109      	bne.n	8000bbe <xTaskIncrementTick+0x16a>
			{
				vApplicationTickHook();
 8000baa:	f7ff fbe1 	bl	8000370 <vApplicationTickHook>
 8000bae:	e006      	b.n	8000bbe <xTaskIncrementTick+0x16a>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <xTaskIncrementTick+0x1a4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	1c5a      	adds	r2, r3, #1
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <xTaskIncrementTick+0x1a4>)
 8000bb8:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8000bba:	f7ff fbd9 	bl	8000370 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <xTaskIncrementTick+0x1a8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <xTaskIncrementTick+0x176>
		{
			xSwitchRequired = pdTRUE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000bca:	697b      	ldr	r3, [r7, #20]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000558 	.word	0x20000558
 8000bd8:	2000054c 	.word	0x2000054c
 8000bdc:	20000500 	.word	0x20000500
 8000be0:	20000504 	.word	0x20000504
 8000be4:	20000564 	.word	0x20000564
 8000be8:	20000004 	.word	0x20000004
 8000bec:	20000550 	.word	0x20000550
 8000bf0:	20000474 	.word	0x20000474
 8000bf4:	20000470 	.word	0x20000470
 8000bf8:	2000055c 	.word	0x2000055c
 8000bfc:	20000560 	.word	0x20000560

08000c00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8000c06:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <vTaskSwitchContext+0xdc>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000c0e:	4b34      	ldr	r3, [pc, #208]	; (8000ce0 <vTaskSwitchContext+0xe0>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e05e      	b.n	8000cd4 <vTaskSwitchContext+0xd4>
	}
	else
	{
		xYieldPending = pdFALSE;
 8000c16:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <vTaskSwitchContext+0xe0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8000c1c:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <vTaskSwitchContext+0xe4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4b30      	ldr	r3, [pc, #192]	; (8000ce4 <vTaskSwitchContext+0xe4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d808      	bhi.n	8000c3e <vTaskSwitchContext+0x3e>
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <vTaskSwitchContext+0xe4>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <vTaskSwitchContext+0xe4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3334      	adds	r3, #52	; 0x34
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f7ff fc07 	bl	800044c <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8000c3e:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <vTaskSwitchContext+0xe4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4618      	mov	r0, r3
 8000c46:	4928      	ldr	r1, [pc, #160]	; (8000ce8 <vTaskSwitchContext+0xe8>)
 8000c48:	2214      	movs	r2, #20
 8000c4a:	f001 fead 	bl	80029a8 <memcmp>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d009      	beq.n	8000c68 <vTaskSwitchContext+0x68>
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <vTaskSwitchContext+0xe4>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <vTaskSwitchContext+0xe4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3334      	adds	r3, #52	; 0x34
 8000c5e:	4610      	mov	r0, r2
 8000c60:	4619      	mov	r1, r3
 8000c62:	f7ff fbf3 	bl	800044c <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000c66:	e00c      	b.n	8000c82 <vTaskSwitchContext+0x82>
 8000c68:	e00b      	b.n	8000c82 <vTaskSwitchContext+0x82>
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <vTaskSwitchContext+0xec>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <vTaskSwitchContext+0x78>
 8000c72:	f001 f8d9 	bl	8001e28 <ulPortSetInterruptMask>
 8000c76:	e7fe      	b.n	8000c76 <vTaskSwitchContext+0x76>
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <vTaskSwitchContext+0xec>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	1e5a      	subs	r2, r3, #1
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <vTaskSwitchContext+0xec>)
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <vTaskSwitchContext+0xec>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	491a      	ldr	r1, [pc, #104]	; (8000cf0 <vTaskSwitchContext+0xf0>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	440b      	add	r3, r1
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0e8      	beq.n	8000c6a <vTaskSwitchContext+0x6a>
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <vTaskSwitchContext+0xec>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <vTaskSwitchContext+0xf0>)
 8000ca6:	4413      	add	r3, r2
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3308      	adds	r3, #8
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d104      	bne.n	8000cca <vTaskSwitchContext+0xca>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <vTaskSwitchContext+0xe4>)
 8000cd2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000558 	.word	0x20000558
 8000ce0:	20000560 	.word	0x20000560
 8000ce4:	20000470 	.word	0x20000470
 8000ce8:	08002cf0 	.word	0x08002cf0
 8000cec:	20000550 	.word	0x20000550
 8000cf0:	20000474 	.word	0x20000474

08000cf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <vTaskPlaceOnEventList+0x16>
 8000d04:	f001 f890 	bl	8001e28 <ulPortSetInterruptMask>
 8000d08:	e7fe      	b.n	8000d08 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <vTaskPlaceOnEventList+0x60>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3318      	adds	r3, #24
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	4619      	mov	r1, r3
 8000d14:	f000 ff34 	bl	8001b80 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <vTaskPlaceOnEventList+0x60>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 ff66 	bl	8001bf0 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2a:	d107      	bne.n	8000d3c <vTaskPlaceOnEventList+0x48>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <vTaskPlaceOnEventList+0x60>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3304      	adds	r3, #4
 8000d32:	4809      	ldr	r0, [pc, #36]	; (8000d58 <vTaskPlaceOnEventList+0x64>)
 8000d34:	4619      	mov	r1, r3
 8000d36:	f000 feff 	bl	8001b38 <vListInsertEnd>
 8000d3a:	e007      	b.n	8000d4c <vTaskPlaceOnEventList+0x58>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8000d3c:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <vTaskPlaceOnEventList+0x68>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f000 f9d6 	bl	80010f8 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000470 	.word	0x20000470
 8000d58:	20000534 	.word	0x20000534
 8000d5c:	2000054c 	.word	0x2000054c

08000d60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
	{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <vTaskPlaceOnEventListRestricted+0x16>
 8000d70:	f001 f85a 	bl	8001e28 <ulPortSetInterruptMask>
 8000d74:	e7fe      	b.n	8000d74 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <vTaskPlaceOnEventListRestricted+0x48>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3318      	adds	r3, #24
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f000 feda 	bl	8001b38 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <vTaskPlaceOnEventListRestricted+0x48>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 ff30 	bl	8001bf0 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <vTaskPlaceOnEventListRestricted+0x4c>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f000 f9ac 	bl	80010f8 <prvAddCurrentTaskToDelayedList>
	}
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000470 	.word	0x20000470
 8000dac:	2000054c 	.word	0x2000054c

08000db0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <xTaskRemoveFromEventList+0x1c>
 8000dc6:	f001 f82f 	bl	8001e28 <ulPortSetInterruptMask>
 8000dca:	e7fe      	b.n	8000dca <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	3318      	adds	r3, #24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 ff0d 	bl	8001bf0 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <xTaskRemoveFromEventList+0xa0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d11d      	bne.n	8000e1a <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	3304      	adds	r3, #4
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 ff04 	bl	8001bf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <xTaskRemoveFromEventList+0xa4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d903      	bls.n	8000dfc <xTaskRemoveFromEventList+0x4c>
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <xTaskRemoveFromEventList+0xa4>)
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <xTaskRemoveFromEventList+0xa8>)
 8000e0a:	441a      	add	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	4610      	mov	r0, r2
 8000e12:	4619      	mov	r1, r3
 8000e14:	f000 fe90 	bl	8001b38 <vListInsertEnd>
 8000e18:	e005      	b.n	8000e26 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	3318      	adds	r3, #24
 8000e1e:	480f      	ldr	r0, [pc, #60]	; (8000e5c <xTaskRemoveFromEventList+0xac>)
 8000e20:	4619      	mov	r1, r3
 8000e22:	f000 fe89 	bl	8001b38 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <xTaskRemoveFromEventList+0xb0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d305      	bcc.n	8000e40 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8000e34:	2301      	movs	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <xTaskRemoveFromEventList+0xb4>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e001      	b.n	8000e44 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8000e44:	68fb      	ldr	r3, [r7, #12]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000558 	.word	0x20000558
 8000e54:	20000550 	.word	0x20000550
 8000e58:	20000474 	.word	0x20000474
 8000e5c:	20000508 	.word	0x20000508
 8000e60:	20000470 	.word	0x20000470
 8000e64:	20000560 	.word	0x20000560

08000e68 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d102      	bne.n	8000e7c <vTaskSetTimeOutState+0x14>
 8000e76:	f000 ffd7 	bl	8001e28 <ulPortSetInterruptMask>
 8000e7a:	e7fe      	b.n	8000e7a <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <vTaskSetTimeOutState+0x2c>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <vTaskSetTimeOutState+0x30>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	605a      	str	r2, [r3, #4]
}
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000564 	.word	0x20000564
 8000e98:	2000054c 	.word	0x2000054c

08000e9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <xTaskCheckForTimeOut+0x16>
 8000eac:	f000 ffbc 	bl	8001e28 <ulPortSetInterruptMask>
 8000eb0:	e7fe      	b.n	8000eb0 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <xTaskCheckForTimeOut+0x22>
 8000eb8:	f000 ffb6 	bl	8001e28 <ulPortSetInterruptMask>
 8000ebc:	e7fe      	b.n	8000ebc <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8000ebe:	f000 ff91 	bl	8001de4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <xTaskCheckForTimeOut+0x98>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d102      	bne.n	8000ed8 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	e026      	b.n	8000f26 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <xTaskCheckForTimeOut+0x9c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d007      	beq.n	8000ef4 <xTaskCheckForTimeOut+0x58>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d802      	bhi.n	8000ef4 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	e018      	b.n	8000f26 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	1ad2      	subs	r2, r2, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d20e      	bcs.n	8000f22 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6859      	ldr	r1, [r3, #4]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	441a      	add	r2, r3
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffa6 	bl	8000e68 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e001      	b.n	8000f26 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
 8000f22:	2301      	movs	r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000f26:	f000 ff6d 	bl	8001e04 <vPortExitCritical>

	return xReturn;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000054c 	.word	0x2000054c
 8000f38:	20000564 	.word	0x20000564

08000f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <vTaskMissedYield+0x14>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000560 	.word	0x20000560

08000f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8000f5c:	f000 f892 	bl	8001084 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <prvIdleTask+0x20>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d901      	bls.n	8000f6c <prvIdleTask+0x18>
			{
				taskYIELD();
 8000f68:	f000 ff2c 	bl	8001dc4 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8000f6c:	f7ff fa68 	bl	8000440 <vApplicationIdleHook>
				}
				( void ) xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8000f70:	e7f4      	b.n	8000f5c <prvIdleTask+0x8>
 8000f72:	bf00      	nop
 8000f74:	20000474 	.word	0x20000474

08000f78 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	603b      	str	r3, [r7, #0]
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	e012      	b.n	8000fb2 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	4413      	add	r3, r2
 8000f92:	781a      	ldrb	r2, [r3, #0]
 8000f94:	68f9      	ldr	r1, [r7, #12]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	440b      	add	r3, r1
 8000f9a:	3330      	adds	r3, #48	; 0x30
 8000f9c:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d100      	bne.n	8000fac <prvInitialiseTCBVariables+0x34>
		{
			break;
 8000faa:	e005      	b.n	8000fb8 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2b09      	cmp	r3, #9
 8000fb6:	d9e9      	bls.n	8000f8c <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d901      	bls.n	8000fca <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fda0 	bl	8001b20 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3318      	adds	r3, #24
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fd9b 	bl	8001b20 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f1c3 0205 	rsb	r2, r3, #5
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop

08001008 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	e00c      	b.n	800102e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4a11      	ldr	r2, [pc, #68]	; (8001064 <prvInitialiseTaskLists+0x5c>)
 8001020:	4413      	add	r3, r2
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fd5c 	bl	8001ae0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3301      	adds	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b04      	cmp	r3, #4
 8001032:	d9ef      	bls.n	8001014 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <prvInitialiseTaskLists+0x60>)
 8001036:	f000 fd53 	bl	8001ae0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <prvInitialiseTaskLists+0x64>)
 800103c:	f000 fd50 	bl	8001ae0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <prvInitialiseTaskLists+0x68>)
 8001042:	f000 fd4d 	bl	8001ae0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001046:	480b      	ldr	r0, [pc, #44]	; (8001074 <prvInitialiseTaskLists+0x6c>)
 8001048:	f000 fd4a 	bl	8001ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <prvInitialiseTaskLists+0x70>)
 800104e:	f000 fd47 	bl	8001ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <prvInitialiseTaskLists+0x74>)
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <prvInitialiseTaskLists+0x60>)
 8001056:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <prvInitialiseTaskLists+0x78>)
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <prvInitialiseTaskLists+0x64>)
 800105c:	601a      	str	r2, [r3, #0]
}
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000474 	.word	0x20000474
 8001068:	200004d8 	.word	0x200004d8
 800106c:	200004ec 	.word	0x200004ec
 8001070:	20000508 	.word	0x20000508
 8001074:	2000051c 	.word	0x2000051c
 8001078:	20000534 	.word	0x20000534
 800107c:	20000500 	.word	0x20000500
 8001080:	20000504 	.word	0x20000504

08001084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 800108a:	e028      	b.n	80010de <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800108c:	f7ff fc3c 	bl	8000908 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <prvCheckTasksWaitingTermination+0x68>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2300      	movne	r3, #0
 800109a:	2301      	moveq	r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	607b      	str	r3, [r7, #4]
			( void ) xTaskResumeAll();
 80010a0:	f7ff fc40 	bl	8000924 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d119      	bne.n	80010de <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 80010aa:	f000 fe9b 	bl	8001de4 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <prvCheckTasksWaitingTermination+0x68>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	3304      	adds	r3, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fd98 	bl	8001bf0 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <prvCheckTasksWaitingTermination+0x6c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	1e5a      	subs	r2, r3, #1
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <prvCheckTasksWaitingTermination+0x6c>)
 80010c8:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <prvCheckTasksWaitingTermination+0x70>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <prvCheckTasksWaitingTermination+0x70>)
 80010d2:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 80010d4:	f000 fe96 	bl	8001e04 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80010d8:	6838      	ldr	r0, [r7, #0]
 80010da:	f000 f875 	bl	80011c8 <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <prvCheckTasksWaitingTermination+0x70>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1d2      	bne.n	800108c <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000051c 	.word	0x2000051c
 80010f0:	20000548 	.word	0x20000548
 80010f4:	20000530 	.word	0x20000530

080010f8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <prvAddCurrentTaskToDelayedList+0x58>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <prvAddCurrentTaskToDelayedList+0x5c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	429a      	cmp	r2, r3
 8001110:	d209      	bcs.n	8001126 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <prvAddCurrentTaskToDelayedList+0x60>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <prvAddCurrentTaskToDelayedList+0x58>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3304      	adds	r3, #4
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f000 fd2e 	bl	8001b80 <vListInsert>
 8001124:	e010      	b.n	8001148 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <prvAddCurrentTaskToDelayedList+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <prvAddCurrentTaskToDelayedList+0x58>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3304      	adds	r3, #4
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f000 fd24 	bl	8001b80 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <prvAddCurrentTaskToDelayedList+0x68>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	d202      	bcs.n	8001148 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <prvAddCurrentTaskToDelayedList+0x68>)
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000470 	.word	0x20000470
 8001154:	2000054c 	.word	0x2000054c
 8001158:	20000504 	.word	0x20000504
 800115c:	20000500 	.word	0x20000500
 8001160:	20000004 	.word	0x20000004

08001164 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8001170:	204c      	movs	r0, #76	; 0x4c
 8001172:	f001 f969 	bl	8002448 <pvPortMalloc>
 8001176:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d01f      	beq.n	80011be <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d106      	bne.n	8001192 <prvAllocateTCBAndStack+0x2e>
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4618      	mov	r0, r3
 800118a:	f001 f95d 	bl	8002448 <pvPortMalloc>
 800118e:	4603      	mov	r3, r0
 8001190:	e000      	b.n	8001194 <prvAllocateTCBAndStack+0x30>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f001 f99d 	bl	80024e0 <vPortFree>
			pxNewTCB = NULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e008      	b.n	80011be <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4610      	mov	r0, r2
 80011b6:	21a5      	movs	r1, #165	; 0xa5
 80011b8:	461a      	mov	r2, r3
 80011ba:	f001 fc29 	bl	8002a10 <memset>
		}
	}

	return pxNewTCB;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 f983 	bl	80024e0 <vPortFree>
		vPortFree( pxTCB );
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f001 f980 	bl	80024e0 <vPortFree>
	}
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop

080011e8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <xTaskGetCurrentTaskHandle+0x1c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80011f4:	687b      	ldr	r3, [r7, #4]
	}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000470 	.word	0x20000470

08001208 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <xTaskGetSchedulerState+0x34>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	e008      	b.n	800122e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <xTaskGetSchedulerState+0x38>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001224:	2301      	movs	r3, #1
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	e001      	b.n	800122e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800122a:	2302      	movs	r3, #2
 800122c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800122e:	687b      	ldr	r3, [r7, #4]
	}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000554 	.word	0x20000554
 8001240:	20000558 	.word	0x20000558

08001244 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d046      	beq.n	80012e4 <vTaskPriorityInherit+0xa0>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800125a:	4b24      	ldr	r3, [pc, #144]	; (80012ec <vTaskPriorityInherit+0xa8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001260:	429a      	cmp	r2, r3
 8001262:	d23f      	bcs.n	80012e4 <vTaskPriorityInherit+0xa0>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <vTaskPriorityInherit+0xa8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	f1c3 0205 	rsb	r2, r3, #5
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6959      	ldr	r1, [r3, #20]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <vTaskPriorityInherit+0xac>)
 8001284:	4413      	add	r3, r2
 8001286:	4299      	cmp	r1, r3
 8001288:	d101      	bne.n	800128e <vTaskPriorityInherit+0x4a>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <vTaskPriorityInherit+0x4c>
 800128e:	2300      	movs	r3, #0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d022      	beq.n	80012da <vTaskPriorityInherit+0x96>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3304      	adds	r3, #4
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fca9 	bl	8001bf0 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <vTaskPriorityInherit+0xa8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <vTaskPriorityInherit+0xb0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d903      	bls.n	80012bc <vTaskPriorityInherit+0x78>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <vTaskPriorityInherit+0xb0>)
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <vTaskPriorityInherit+0xac>)
 80012ca:	441a      	add	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3304      	adds	r3, #4
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f000 fc30 	bl	8001b38 <vListInsertEnd>
 80012d8:	e004      	b.n	80012e4 <vTaskPriorityInherit+0xa0>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <vTaskPriorityInherit+0xa8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000470 	.word	0x20000470
 80012f0:	20000474 	.word	0x20000474
 80012f4:	20000550 	.word	0x20000550

080012f8 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d02c      	beq.n	8001364 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001312:	429a      	cmp	r2, r3
 8001314:	d026      	beq.n	8001364 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3304      	adds	r3, #4
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fc68 	bl	8001bf0 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	f1c3 0205 	rsb	r2, r3, #5
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList( pxTCB );
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <vTaskPriorityDisinherit+0x74>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d903      	bls.n	8001348 <vTaskPriorityDisinherit+0x50>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <vTaskPriorityDisinherit+0x74>)
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <vTaskPriorityDisinherit+0x78>)
 8001356:	441a      	add	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3304      	adds	r3, #4
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f000 fbea 	bl	8001b38 <vListInsertEnd>
			}
		}
	}
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000550 	.word	0x20000550
 8001370:	20000474 	.word	0x20000474

08001374 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <xQueueGenericReset+0x1a>
 8001388:	f000 fd4e 	bl	8001e28 <ulPortSetInterruptMask>
 800138c:	e7fe      	b.n	800138c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800138e:	f000 fd29 	bl	8001de4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139a:	68f9      	ldr	r1, [r7, #12]
 800139c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800139e:	fb01 f303 	mul.w	r3, r1, r3
 80013a2:	441a      	add	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013be:	3b01      	subs	r3, #1
 80013c0:	68f9      	ldr	r1, [r7, #12]
 80013c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80013c4:	fb01 f303 	mul.w	r3, r1, r3
 80013c8:	441a      	add	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10e      	bne.n	8001402 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d014      	beq.n	8001416 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3310      	adds	r3, #16
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fcdd 	bl	8000db0 <xTaskRemoveFromEventList>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10c      	bne.n	8001416 <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 80013fc:	f000 fce2 	bl	8001dc4 <vPortYield>
 8001400:	e009      	b.n	8001416 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3310      	adds	r3, #16
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fb6a 	bl	8001ae0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3324      	adds	r3, #36	; 0x24
 8001410:	4618      	mov	r0, r3
 8001412:	f000 fb65 	bl	8001ae0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001416:	f000 fcf5 	bl	8001e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	4613      	mov	r3, r2
 8001430:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d02a      	beq.n	8001492 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 800143c:	2050      	movs	r0, #80	; 0x50
 800143e:	f001 f803 	bl	8002448 <pvPortMalloc>
 8001442:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d023      	beq.n	8001492 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	3301      	adds	r3, #1
 8001454:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f000 fff6 	bl	8002448 <pvPortMalloc>
 800145c:	4602      	mov	r2, r0
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d010      	beq.n	800148c <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001476:	69b8      	ldr	r0, [r7, #24]
 8001478:	2101      	movs	r1, #1
 800147a:	f7ff ff7b 	bl	8001374 <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e002      	b.n	8001492 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 800148c:	69b8      	ldr	r0, [r7, #24]
 800148e:	f001 f827 	bl	80024e0 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <xQueueGenericCreate+0x7a>
 8001498:	f000 fcc6 	bl	8001e28 <ulPortSetInterruptMask>
 800149c:	e7fe      	b.n	800149c <xQueueGenericCreate+0x78>

	return xReturn;
 800149e:	69fb      	ldr	r3, [r7, #28]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <xQueueGenericSend+0x22>
 80014c4:	f000 fcb0 	bl	8001e28 <ulPortSetInterruptMask>
 80014c8:	e7fe      	b.n	80014c8 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d103      	bne.n	80014d8 <xQueueGenericSend+0x30>
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <xQueueGenericSend+0x34>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <xQueueGenericSend+0x36>
 80014dc:	2300      	movs	r3, #0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <xQueueGenericSend+0x40>
 80014e2:	f000 fca1 	bl	8001e28 <ulPortSetInterruptMask>
 80014e6:	e7fe      	b.n	80014e6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d103      	bne.n	80014f6 <xQueueGenericSend+0x4e>
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <xQueueGenericSend+0x52>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <xQueueGenericSend+0x54>
 80014fa:	2300      	movs	r3, #0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <xQueueGenericSend+0x5e>
 8001500:	f000 fc92 	bl	8001e28 <ulPortSetInterruptMask>
 8001504:	e7fe      	b.n	8001504 <xQueueGenericSend+0x5c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001506:	f000 fc6d 	bl	8001de4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001512:	429a      	cmp	r2, r3
 8001514:	d302      	bcc.n	800151c <xQueueGenericSend+0x74>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d116      	bne.n	800154a <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800151c:	69b8      	ldr	r0, [r7, #24]
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	f000 f9a9 	bl	8001878 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <xQueueGenericSend+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	3324      	adds	r3, #36	; 0x24
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fc3c 	bl	8000db0 <xTaskRemoveFromEventList>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <xQueueGenericSend+0x9a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 800153e:	f000 fc41 	bl	8001dc4 <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001542:	f000 fc5f 	bl	8001e04 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8001546:	2301      	movs	r3, #1
 8001548:	e059      	b.n	80015fe <xQueueGenericSend+0x156>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d103      	bne.n	8001558 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001550:	f000 fc58 	bl	8001e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001554:	2300      	movs	r3, #0
 8001556:	e052      	b.n	80015fe <xQueueGenericSend+0x156>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800155e:	f107 0310 	add.w	r3, r7, #16
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fc80 	bl	8000e68 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001568:	2301      	movs	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 800156c:	f000 fc4a 	bl	8001e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001570:	f7ff f9ca 	bl	8000908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001574:	f000 fc36 	bl	8001de4 <vPortEnterCritical>
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d102      	bne.n	8001588 <xQueueGenericSend+0xe0>
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2200      	movs	r2, #0
 8001586:	645a      	str	r2, [r3, #68]	; 0x44
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d102      	bne.n	8001598 <xQueueGenericSend+0xf0>
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2200      	movs	r2, #0
 8001596:	649a      	str	r2, [r3, #72]	; 0x48
 8001598:	f000 fc34 	bl	8001e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800159c:	f107 0210 	add.w	r2, r7, #16
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fc79 	bl	8000e9c <xTaskCheckForTimeOut>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d11e      	bne.n	80015ee <xQueueGenericSend+0x146>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80015b0:	69b8      	ldr	r0, [r7, #24]
 80015b2:	f000 fa51 	bl	8001a58 <prvIsQueueFull>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d012      	beq.n	80015e2 <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f103 0210 	add.w	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff fb94 	bl	8000cf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80015cc:	69b8      	ldr	r0, [r7, #24]
 80015ce:	f000 f9e1 	bl	8001994 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80015d2:	f7ff f9a7 	bl	8000924 <xTaskResumeAll>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10f      	bne.n	80015fc <xQueueGenericSend+0x154>
				{
					portYIELD_WITHIN_API();
 80015dc:	f000 fbf2 	bl	8001dc4 <vPortYield>
 80015e0:	e00c      	b.n	80015fc <xQueueGenericSend+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80015e2:	69b8      	ldr	r0, [r7, #24]
 80015e4:	f000 f9d6 	bl	8001994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80015e8:	f7ff f99c 	bl	8000924 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80015ec:	e78b      	b.n	8001506 <xQueueGenericSend+0x5e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80015ee:	69b8      	ldr	r0, [r7, #24]
 80015f0:	f000 f9d0 	bl	8001994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80015f4:	f7ff f996 	bl	8000924 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e000      	b.n	80015fe <xQueueGenericSend+0x156>
		}
	}
 80015fc:	e783      	b.n	8001506 <xQueueGenericSend+0x5e>
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop

08001608 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <xQueueGenericSendFromISR+0x1e>
 8001620:	f000 fc02 	bl	8001e28 <ulPortSetInterruptMask>
 8001624:	e7fe      	b.n	8001624 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d103      	bne.n	8001634 <xQueueGenericSendFromISR+0x2c>
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <xQueueGenericSendFromISR+0x30>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <xQueueGenericSendFromISR+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <xQueueGenericSendFromISR+0x3c>
 800163e:	f000 fbf3 	bl	8001e28 <ulPortSetInterruptMask>
 8001642:	e7fe      	b.n	8001642 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d103      	bne.n	8001652 <xQueueGenericSendFromISR+0x4a>
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <xQueueGenericSendFromISR+0x4e>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <xQueueGenericSendFromISR+0x50>
 8001656:	2300      	movs	r3, #0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <xQueueGenericSendFromISR+0x5a>
 800165c:	f000 fbe4 	bl	8001e28 <ulPortSetInterruptMask>
 8001660:	e7fe      	b.n	8001660 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001662:	f000 fc4f 	bl	8001f04 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001666:	f000 fbdf 	bl	8001e28 <ulPortSetInterruptMask>
 800166a:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001674:	429a      	cmp	r2, r3
 8001676:	d302      	bcc.n	800167e <xQueueGenericSendFromISR+0x76>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d124      	bne.n	80016c8 <xQueueGenericSendFromISR+0xc0>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800167e:	69b8      	ldr	r0, [r7, #24]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	f000 f8f8 	bl	8001878 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d112      	bne.n	80016b8 <xQueueGenericSendFromISR+0xb0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	2b00      	cmp	r3, #0
 8001698:	d013      	beq.n	80016c2 <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	3324      	adds	r3, #36	; 0x24
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fb86 	bl	8000db0 <xTaskRemoveFromEventList>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00b      	beq.n	80016c2 <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e004      	b.n	80016c2 <xQueueGenericSendFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	e001      	b.n	80016cc <xQueueGenericSendFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80016cc:	6978      	ldr	r0, [r7, #20]
 80016ce:	f000 fbb5 	bl	8001e3c <vPortClearInterruptMask>

	return xReturn;
 80016d2:	69fb      	ldr	r3, [r7, #28]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <xQueueGenericReceive+0x22>
 80016f8:	f000 fb96 	bl	8001e28 <ulPortSetInterruptMask>
 80016fc:	e7fe      	b.n	80016fc <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <xQueueGenericReceive+0x30>
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <xQueueGenericReceive+0x34>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <xQueueGenericReceive+0x36>
 8001710:	2300      	movs	r3, #0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <xQueueGenericReceive+0x40>
 8001716:	f000 fb87 	bl	8001e28 <ulPortSetInterruptMask>
 800171a:	e7fe      	b.n	800171a <xQueueGenericReceive+0x3e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800171c:	f000 fb62 	bl	8001de4 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03b      	beq.n	80017a0 <xQueueGenericReceive+0xc4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800172e:	6a38      	ldr	r0, [r7, #32]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	f000 f909 	bl	8001948 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d11c      	bne.n	8001776 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d104      	bne.n	8001758 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 800174e:	f7ff fd4b 	bl	80011e8 <xTaskGetCurrentTaskHandle>
 8001752:	4602      	mov	r2, r0
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d01b      	beq.n	8001798 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	3310      	adds	r3, #16
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fb23 	bl	8000db0 <xTaskRemoveFromEventList>
 800176a:	4603      	mov	r3, r0
 800176c:	2b01      	cmp	r3, #1
 800176e:	d113      	bne.n	8001798 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
 8001770:	f000 fb28 	bl	8001dc4 <vPortYield>
 8001774:	e010      	b.n	8001798 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2b00      	cmp	r3, #0
 8001782:	d009      	beq.n	8001798 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	3324      	adds	r3, #36	; 0x24
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fb11 	bl	8000db0 <xTaskRemoveFromEventList>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8001794:	f000 fb16 	bl	8001dc4 <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
 8001798:	f000 fb34 	bl	8001e04 <vPortExitCritical>
				return pdPASS;
 800179c:	2301      	movs	r3, #1
 800179e:	e066      	b.n	800186e <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d103      	bne.n	80017ae <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80017a6:	f000 fb2d 	bl	8001e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e05f      	b.n	800186e <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d106      	bne.n	80017c2 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fb55 	bl	8000e68 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80017be:	2301      	movs	r3, #1
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 80017c2:	f000 fb1f 	bl	8001e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80017c6:	f7ff f89f 	bl	8000908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80017ca:	f000 fb0b 	bl	8001de4 <vPortEnterCritical>
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d6:	d102      	bne.n	80017de <xQueueGenericReceive+0x102>
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	2200      	movs	r2, #0
 80017dc:	645a      	str	r2, [r3, #68]	; 0x44
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e6:	d102      	bne.n	80017ee <xQueueGenericReceive+0x112>
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	2200      	movs	r2, #0
 80017ec:	649a      	str	r2, [r3, #72]	; 0x48
 80017ee:	f000 fb09 	bl	8001e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80017f2:	f107 0214 	add.w	r2, r7, #20
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff fb4e 	bl	8000e9c <xTaskCheckForTimeOut>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d12b      	bne.n	800185e <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001806:	6a38      	ldr	r0, [r7, #32]
 8001808:	f000 f910 	bl	8001a2c <prvIsQueueEmpty>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d01f      	beq.n	8001852 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d108      	bne.n	800182c <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
 800181a:	f000 fae3 	bl	8001de4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fd0e 	bl	8001244 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8001828:	f000 faec 	bl	8001e04 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff fa5c 	bl	8000cf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800183c:	6a38      	ldr	r0, [r7, #32]
 800183e:	f000 f8a9 	bl	8001994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001842:	f7ff f86f 	bl	8000924 <xTaskResumeAll>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10f      	bne.n	800186c <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
 800184c:	f000 faba 	bl	8001dc4 <vPortYield>
 8001850:	e00c      	b.n	800186c <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001852:	6a38      	ldr	r0, [r7, #32]
 8001854:	f000 f89e 	bl	8001994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001858:	f7ff f864 	bl	8000924 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 800185c:	e75e      	b.n	800171c <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800185e:	6a38      	ldr	r0, [r7, #32]
 8001860:	f000 f898 	bl	8001994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001864:	f7ff f85e 	bl	8000924 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8001868:	2300      	movs	r3, #0
 800186a:	e000      	b.n	800186e <xQueueGenericReceive+0x192>
		}
	}
 800186c:	e756      	b.n	800171c <xQueueGenericReceive+0x40>
}
 800186e:	4618      	mov	r0, r3
 8001870:	3728      	adds	r7, #40	; 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop

08001878 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10c      	bne.n	80018a6 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d151      	bne.n	8001938 <prvCopyDataToQueue+0xc0>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fd2d 	bl	80012f8 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	e048      	b.n	8001938 <prvCopyDataToQueue+0xc0>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d11a      	bne.n	80018e2 <prvCopyDataToQueue+0x6a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	4610      	mov	r0, r2
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	461a      	mov	r2, r3
 80018ba:	f7fe fc8f 	bl	80001dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	441a      	add	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d32f      	bcc.n	8001938 <prvCopyDataToQueue+0xc0>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	e02a      	b.n	8001938 <prvCopyDataToQueue+0xc0>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4610      	mov	r0, r2
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	461a      	mov	r2, r3
 80018f0:	f7fe fc74 	bl	80001dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	425b      	negs	r3, r3
 80018fe:	441a      	add	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	425b      	negs	r3, r3
 800191a:	441a      	add	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	60da      	str	r2, [r3, #12]
		}

		if( xPosition == queueOVERWRITE )
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d108      	bne.n	8001938 <prvCopyDataToQueue+0xc0>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192a:	2b00      	cmp	r3, #0
 800192c:	d004      	beq.n	8001938 <prvCopyDataToQueue+0xc0>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001932:	1e5a      	subs	r2, r3, #1
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d019      	beq.n	800198e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	441a      	add	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	d303      	bcc.n	800197c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	60da      	str	r2, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	6838      	ldr	r0, [r7, #0]
 8001986:	4611      	mov	r1, r2
 8001988:	461a      	mov	r2, r3
 800198a:	f7fe fc27 	bl	80001dc <memcpy>
	}
}
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800199c:	f000 fa22 	bl	8001de4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80019a0:	e014      	b.n	80019cc <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00a      	beq.n	80019c0 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3324      	adds	r3, #36	; 0x24
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f9fe 	bl	8000db0 <xTaskRemoveFromEventList>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80019ba:	f7ff fabf 	bl	8000f3c <vTaskMissedYield>
 80019be:	e000      	b.n	80019c2 <prvUnlockQueue+0x2e>
					}
				}
				else
				{
					break;
 80019c0:	e008      	b.n	80019d4 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c6:	1e5a      	subs	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dce6      	bgt.n	80019a2 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f04f 32ff 	mov.w	r2, #4294967295
 80019da:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80019dc:	f000 fa12 	bl	8001e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80019e0:	f000 fa00 	bl	8001de4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80019e4:	e014      	b.n	8001a10 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00f      	beq.n	8001a0e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3310      	adds	r3, #16
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f9dc 	bl	8000db0 <xTaskRemoveFromEventList>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 80019fe:	f7ff fa9d 	bl	8000f3c <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	1e5a      	subs	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	645a      	str	r2, [r3, #68]	; 0x44
 8001a0c:	e000      	b.n	8001a10 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8001a0e:	e003      	b.n	8001a18 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	dce6      	bgt.n	80019e6 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001a20:	f000 f9f0 	bl	8001e04 <vPortExitCritical>
}
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop

08001a2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001a34:	f000 f9d6 	bl	8001de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001a40:	2301      	movs	r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e001      	b.n	8001a4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001a4a:	f000 f9db 	bl	8001e04 <vPortExitCritical>

	return xReturn;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001a60:	f000 f9c0 	bl	8001de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d102      	bne.n	8001a76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001a70:	2301      	movs	r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e001      	b.n	8001a7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001a7a:	f000 f9c3 	bl	8001e04 <vPortExitCritical>

	return xReturn;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001a96:	f000 f9a5 	bl	8001de4 <vPortEnterCritical>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa2:	d102      	bne.n	8001aaa <vQueueWaitForMessageRestricted+0x22>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab2:	d102      	bne.n	8001aba <vQueueWaitForMessageRestricted+0x32>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	649a      	str	r2, [r3, #72]	; 0x48
 8001aba:	f000 f9a3 	bl	8001e04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d105      	bne.n	8001ad2 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3324      	adds	r3, #36	; 0x24
 8001aca:	4618      	mov	r0, r3
 8001acc:	6839      	ldr	r1, [r7, #0]
 8001ace:	f7ff f947 	bl	8000d60 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7ff ff5e 	bl	8001994 <prvUnlockQueue>
	}
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop

08001ae0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList * const pxList )
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f103 0208 	add.w	r2, r3, #8
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f103 0208 	add.w	r2, r3, #8
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f103 0208 	add.w	r2, r3, #8
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
}
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop

08001b20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
}
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	601a      	str	r2, [r3, #0]
}
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop

08001b80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b96:	d103      	bne.n	8001ba0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	e00c      	b.n	8001bba <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e002      	b.n	8001bae <vListInsert+0x2e>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d9f6      	bls.n	8001ba8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	601a      	str	r2, [r3, #0]
}
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6892      	ldr	r2, [r2, #8]
 8001c00:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6852      	ldr	r2, [r2, #4]
 8001c0a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d103      	bne.n	8001c24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	1e5a      	subs	r2, r3, #1
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3b04      	subs	r3, #4
 8001c54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3b04      	subs	r3, #4
 8001c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3b04      	subs	r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <pxPortInitialiseStack+0x60>)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3b14      	subs	r3, #20
 8001c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3b04      	subs	r3, #4
 8001c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f06f 0202 	mvn.w	r2, #2
 8001c8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3b20      	subs	r3, #32
 8001c94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	08001ca9 	.word	0x08001ca9

08001ca8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <prvTaskExitError+0x1c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d002      	beq.n	8001cbc <prvTaskExitError+0x14>
 8001cb6:	f000 f8b7 	bl	8001e28 <ulPortSetInterruptMask>
 8001cba:	e7fe      	b.n	8001cba <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
 8001cbc:	f000 f8b4 	bl	8001e28 <ulPortSetInterruptMask>
	for( ;; );
 8001cc0:	e7fe      	b.n	8001cc0 <prvTaskExitError+0x18>
 8001cc2:	bf00      	nop
 8001cc4:	20000008 	.word	0x20000008

08001cc8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <pxCurrentTCBConst2>)
 8001cca:	6819      	ldr	r1, [r3, #0]
 8001ccc:	6808      	ldr	r0, [r1, #0]
 8001cce:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cd2:	f380 8809 	msr	PSP, r0
 8001cd6:	f04f 0000 	mov.w	r0, #0
 8001cda:	f380 8811 	msr	BASEPRI, r0
 8001cde:	4770      	bx	lr

08001ce0 <pxCurrentTCBConst2>:
 8001ce0:	20000470 	.word	0x20000470

08001ce4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001ce4:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <prvPortStartFirstTask+0x10>)
 8001ce6:	6800      	ldr	r0, [r0, #0]
 8001ce8:	6800      	ldr	r0, [r0, #0]
 8001cea:	f380 8808 	msr	MSP, r0
 8001cee:	b662      	cpsie	i
 8001cf0:	df00      	svc	0
 8001cf2:	bf00      	nop
 8001cf4:	e000ed08 	.word	0xe000ed08

08001cf8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile unsigned long ulOriginalPriority;
		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <xPortStartScheduler+0xb4>)
 8001d00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	22ff      	movs	r2, #255	; 0xff
 8001d0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <xPortStartScheduler+0xb8>)
 8001d24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001d26:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <xPortStartScheduler+0xbc>)
 8001d28:	2207      	movs	r2, #7
 8001d2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001d2c:	e009      	b.n	8001d42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <xPortStartScheduler+0xbc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	1e5a      	subs	r2, r3, #1
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <xPortStartScheduler+0xbc>)
 8001d36:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	b25b      	sxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	dbef      	blt.n	8001d2e <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <xPortStartScheduler+0xbc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	021a      	lsls	r2, r3, #8
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <xPortStartScheduler+0xbc>)
 8001d56:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001d58:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <xPortStartScheduler+0xbc>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <xPortStartScheduler+0xbc>)
 8001d62:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <xPortStartScheduler+0xc0>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <xPortStartScheduler+0xc0>)
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001d76:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <xPortStartScheduler+0xc0>)
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <xPortStartScheduler+0xc0>)
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001d82:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001d84:	f000 f89a 	bl	8001ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <xPortStartScheduler+0xc4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001d8e:	f000 f8af 	bl	8001ef0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <xPortStartScheduler+0xc8>)
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <xPortStartScheduler+0xc8>)
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001d9c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001d9e:	f7ff ffa1 	bl	8001ce4 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	e000e400 	.word	0xe000e400
 8001db0:	2000056c 	.word	0x2000056c
 8001db4:	20000570 	.word	0x20000570
 8001db8:	e000ed20 	.word	0xe000ed20
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	e000ef34 	.word	0xe000ef34

08001dc4 <vPortYield>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <vPortYield+0x1c>)
 8001dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dce:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8001dd0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001dd4:	f3bf 8f6f 	isb	sy
}
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed04 	.word	0xe000ed04

08001de4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8001de8:	f000 f81e 	bl	8001e28 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <vPortEnterCritical+0x1c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <vPortEnterCritical+0x1c>)
 8001df4:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8001df6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001dfa:	f3bf 8f6f 	isb	sy
}
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000008 	.word	0x20000008

08001e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <vPortExitCritical+0x20>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <vPortExitCritical+0x20>)
 8001e10:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8001e12:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <vPortExitCritical+0x20>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 f80e 	bl	8001e3c <vPortClearInterruptMask>
	}
}
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008

08001e28 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8001e28:	f3ef 8011 	mrs	r0, BASEPRI
 8001e2c:	f04f 0150 	mov.w	r1, #80	; 0x50
 8001e30:	f381 8811 	msr	BASEPRI, r1
 8001e34:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bf00      	nop

08001e3c <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8001e3c:	f380 8811 	msr	BASEPRI, r0
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop

08001e44 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001e44:	f3ef 8009 	mrs	r0, PSP
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <pxCurrentTCBConst>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	f01e 0f10 	tst.w	lr, #16
 8001e50:	bf08      	it	eq
 8001e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e5a:	6010      	str	r0, [r2, #0]
 8001e5c:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e64:	f380 8811 	msr	BASEPRI, r0
 8001e68:	f7fe feca 	bl	8000c00 <vTaskSwitchContext>
 8001e6c:	f04f 0000 	mov.w	r0, #0
 8001e70:	f380 8811 	msr	BASEPRI, r0
 8001e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	6808      	ldr	r0, [r1, #0]
 8001e7c:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e80:	f01e 0f10 	tst.w	lr, #16
 8001e84:	bf08      	it	eq
 8001e86:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001e8a:	f380 8809 	msr	PSP, r0
 8001e8e:	4770      	bx	lr

08001e90 <pxCurrentTCBConst>:
 8001e90:	20000470 	.word	0x20000470

08001e94 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8001e98:	f7ff ffc6 	bl	8001e28 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001e9c:	f7fe fdda 	bl	8000a54 <xTaskIncrementTick>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <SysTick_Handler+0x24>)
 8001ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eac:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff ffc4 	bl	8001e3c <vPortClearInterruptMask>
}
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	e000ed04 	.word	0xe000ed04

08001ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <vPortSetupTimerInterrupt+0x24>)
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <vPortSetupTimerInterrupt+0x28>)
 8001ec4:	6811      	ldr	r1, [r2, #0]
 8001ec6:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <vPortSetupTimerInterrupt+0x2c>)
 8001ec8:	fba2 0201 	umull	r0, r2, r2, r1
 8001ecc:	0992      	lsrs	r2, r2, #6
 8001ece:	3a01      	subs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <vPortSetupTimerInterrupt+0x30>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
}
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000e014 	.word	0xe000e014
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	10624dd3 	.word	0x10624dd3
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001ef0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001f00 <vPortEnableVFP+0x10>
 8001ef4:	6801      	ldr	r1, [r0, #0]
 8001ef6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001efa:	6001      	str	r1, [r0, #0]
 8001efc:	4770      	bx	lr
 8001efe:	0000      	.short	0x0000
 8001f00:	e000ed88 	.word	0xe000ed88

08001f04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8001f0a:	f3ef 8305 	mrs	r3, IPSR
 8001f0e:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	d90c      	bls.n	8001f30 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001f16:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <vPortValidateInterruptPriority+0x48>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <vPortValidateInterruptPriority+0x4c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d202      	bcs.n	8001f30 <vPortValidateInterruptPriority+0x2c>
 8001f2a:	f7ff ff7d 	bl	8001e28 <ulPortSetInterruptMask>
 8001f2e:	e7fe      	b.n	8001f2e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <vPortValidateInterruptPriority+0x50>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <vPortValidateInterruptPriority+0x54>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d902      	bls.n	8001f46 <vPortValidateInterruptPriority+0x42>
 8001f40:	f7ff ff72 	bl	8001e28 <ulPortSetInterruptMask>
 8001f44:	e7fe      	b.n	8001f44 <vPortValidateInterruptPriority+0x40>
	}
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	e000e3f0 	.word	0xe000e3f0
 8001f50:	2000056c 	.word	0x2000056c
 8001f54:	e000ed0c 	.word	0xe000ed0c
 8001f58:	20000570 	.word	0x20000570

08001f5c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001f66:	f000 fa45 	bl	80023f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <xTimerCreateTimerTask+0x4c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00f      	beq.n	8001f92 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8001f72:	2302      	movs	r3, #2
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2300      	movs	r3, #0
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	9302      	str	r3, [sp, #8]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	9303      	str	r3, [sp, #12]
 8001f82:	480a      	ldr	r0, [pc, #40]	; (8001fac <xTimerCreateTimerTask+0x50>)
 8001f84:	490a      	ldr	r1, [pc, #40]	; (8001fb0 <xTimerCreateTimerTask+0x54>)
 8001f86:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f7fe fb78 	bl	8000680 <xTaskGenericCreate>
 8001f90:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <xTimerCreateTimerTask+0x42>
 8001f98:	f7ff ff46 	bl	8001e28 <ulPortSetInterruptMask>
 8001f9c:	e7fe      	b.n	8001f9c <xTimerCreateTimerTask+0x40>
	return xReturn;
 8001f9e:	687b      	ldr	r3, [r7, #4]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200005a4 	.word	0x200005a4
 8001fac:	080020b1 	.word	0x080020b1
 8001fb0:	08002ba4 	.word	0x08002ba4

08001fb4 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <xTimerGenericCommand+0x88>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d030      	beq.n	8002030 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d11c      	bne.n	800201a <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001fe0:	f7ff f912 	bl	8001208 <xTaskGetSchedulerState>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10b      	bne.n	8002002 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <xTimerGenericCommand+0x88>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	f107 0310 	add.w	r3, r7, #16
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f7ff fa55 	bl	80014a8 <xQueueGenericSend>
 8001ffe:	61f8      	str	r0, [r7, #28]
 8002000:	e016      	b.n	8002030 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <xTimerGenericCommand+0x88>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	f107 0310 	add.w	r3, r7, #16
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	2200      	movs	r2, #0
 8002010:	2300      	movs	r3, #0
 8002012:	f7ff fa49 	bl	80014a8 <xQueueGenericSend>
 8002016:	61f8      	str	r0, [r7, #28]
 8002018:	e00a      	b.n	8002030 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <xTimerGenericCommand+0x88>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	4610      	mov	r0, r2
 8002024:	4619      	mov	r1, r3
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	2300      	movs	r3, #0
 800202a:	f7ff faed 	bl	8001608 <xQueueGenericSendFromISR>
 800202e:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 8002030:	69fb      	ldr	r3, [r7, #28]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200005a4 	.word	0x200005a4

08002040 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af02      	add	r7, sp, #8
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800204a:	4b18      	ldr	r3, [pc, #96]	; (80020ac <prvProcessExpiredTimer+0x6c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	60fb      	str	r3, [r7, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3304      	adds	r3, #4
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fdc9 	bl	8001bf0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d11b      	bne.n	800209e <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	4619      	mov	r1, r3
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f000 f8a9 	bl	80021cc <prvInsertTimerInActiveList>
 800207a:	4603      	mov	r3, r0
 800207c:	2b01      	cmp	r3, #1
 800207e:	d10e      	bne.n	800209e <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8002080:	2300      	movs	r3, #0
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	2100      	movs	r1, #0
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	2300      	movs	r3, #0
 800208c:	f7ff ff92 	bl	8001fb4 <xTimerGenericCommand>
 8002090:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <prvProcessExpiredTimer+0x5e>
 8002098:	f7ff fec6 	bl	8001e28 <ulPortSetInterruptMask>
 800209c:	e7fe      	b.n	800209c <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	4798      	blx	r3
}
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	2000059c 	.word	0x2000059c

080020b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80020b8:	f107 0308 	add.w	r3, r7, #8
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 f83f 	bl	8002140 <prvGetNextExpireTime>
 80020c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f000 f803 	bl	80020d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80020ce:	f000 f8bf 	bl	8002250 <prvProcessReceivedCommands>
	}
 80020d2:	e7f1      	b.n	80020b8 <prvTimerTask+0x8>

080020d4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 80020de:	f7fe fc13 	bl	8000908 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80020e2:	f107 0308 	add.w	r3, r7, #8
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f84e 	bl	8002188 <prvSampleTimeNow>
 80020ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d11e      	bne.n	8002132 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10a      	bne.n	8002110 <prvProcessTimerOrBlockTask+0x3c>
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d806      	bhi.n	8002110 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002102:	f7fe fc0f 	bl	8000924 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	68f9      	ldr	r1, [r7, #12]
 800210a:	f7ff ff99 	bl	8002040 <prvProcessExpiredTimer>
 800210e:	e012      	b.n	8002136 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <prvProcessTimerOrBlockTask+0x68>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1acb      	subs	r3, r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	f7ff fcb3 	bl	8001a88 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8002122:	f7fe fbff 	bl	8000924 <xTaskResumeAll>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d104      	bne.n	8002136 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 800212c:	f7ff fe4a 	bl	8001dc4 <vPortYield>
 8002130:	e001      	b.n	8002136 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8002132:	f7fe fbf7 	bl	8000924 <xTaskResumeAll>
		}
	}
}
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200005a4 	.word	0x200005a4

08002140 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <prvGetNextExpireTime+0x44>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf14      	ite	ne
 8002152:	2300      	movne	r3, #0
 8002154:	2301      	moveq	r3, #1
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d105      	bne.n	8002172 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <prvGetNextExpireTime+0x44>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e001      	b.n	8002176 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002176:	68fb      	ldr	r3, [r7, #12]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	2000059c 	.word	0x2000059c

08002188 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002190:	f7fe fc4e 	bl	8000a30 <xTaskGetTickCount>
 8002194:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <prvSampleTimeNow+0x40>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d208      	bcs.n	80021b2 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <prvSampleTimeNow+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 f8cb 	bl	8002340 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e002      	b.n	80021b8 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <prvSampleTimeNow+0x40>)
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200005a8 	.word	0x200005a8

080021cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d812      	bhi.n	8002218 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	1ad2      	subs	r2, r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d302      	bcc.n	8002206 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002200:	2301      	movs	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e01b      	b.n	800223e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <prvInsertTimerInActiveList+0x7c>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3304      	adds	r3, #4
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	f7ff fcb5 	bl	8001b80 <vListInsert>
 8002216:	e012      	b.n	800223e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d206      	bcs.n	800222e <prvInsertTimerInActiveList+0x62>
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d302      	bcc.n	800222e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002228:	2301      	movs	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	e007      	b.n	800223e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <prvInsertTimerInActiveList+0x80>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3304      	adds	r3, #4
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	f7ff fca1 	bl	8001b80 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800223e:	697b      	ldr	r3, [r7, #20]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200005a0 	.word	0x200005a0
 800224c:	2000059c 	.word	0x2000059c

08002250 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002256:	e060      	b.n	800231a <prvProcessReceivedCommands+0xca>
	{
		pxTimer = xMessage.pxTimer;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <prvProcessReceivedCommands+0x1e>
		{
			/* The timer is in a list, remove it. */
			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	3304      	adds	r3, #4
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fcc1 	bl	8001bf0 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff89 	bl	8002188 <prvSampleTimeNow>
 8002276:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d84c      	bhi.n	8002318 <prvProcessReceivedCommands+0xc8>
 800227e:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <prvProcessReceivedCommands+0x34>)
 8002280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002284:	08002295 	.word	0x08002295
 8002288:	08002319 	.word	0x08002319
 800228c:	080022e7 	.word	0x080022e7
 8002290:	08002311 	.word	0x08002311
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	441a      	add	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	69f8      	ldr	r0, [r7, #28]
 80022a0:	4611      	mov	r1, r2
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	f7ff ff92 	bl	80021cc <prvInsertTimerInActiveList>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d11a      	bne.n	80022e4 <prvProcessReceivedCommands+0x94>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	69f8      	ldr	r0, [r7, #28]
 80022b4:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d112      	bne.n	80022e4 <prvProcessReceivedCommands+0x94>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	4413      	add	r3, r2
 80022c6:	2200      	movs	r2, #0
 80022c8:	9200      	str	r2, [sp, #0]
 80022ca:	69f8      	ldr	r0, [r7, #28]
 80022cc:	2100      	movs	r1, #0
 80022ce:	461a      	mov	r2, r3
 80022d0:	2300      	movs	r3, #0
 80022d2:	f7ff fe6f 	bl	8001fb4 <xTimerGenericCommand>
 80022d6:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <prvProcessReceivedCommands+0x94>
 80022de:	f7ff fda3 	bl	8001e28 <ulPortSetInterruptMask>
 80022e2:	e7fe      	b.n	80022e2 <prvProcessReceivedCommands+0x92>
						( void ) xResult;
					}
				}
				break;
 80022e4:	e019      	b.n	800231a <prvProcessReceivedCommands+0xca>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <prvProcessReceivedCommands+0xaa>
 80022f4:	f7ff fd98 	bl	8001e28 <ulPortSetInterruptMask>
 80022f8:	e7fe      	b.n	80022f8 <prvProcessReceivedCommands+0xa8>
				longer or shorter than the old one.  The command time is 
				therefore set to the current time, and as the period cannot be
				zero the next expiry time can only be in the future, meaning
				(unlike for the xTimerStart() case above) there is no fail case
				that needs to be handled here. */
				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4413      	add	r3, r2
 8002302:	69f8      	ldr	r0, [r7, #28]
 8002304:	4619      	mov	r1, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f7ff ff5f 	bl	80021cc <prvInsertTimerInActiveList>
				break;
 800230e:	e004      	b.n	800231a <prvProcessReceivedCommands+0xca>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8002310:	69f8      	ldr	r0, [r7, #28]
 8002312:	f000 f8e5 	bl	80024e0 <vPortFree>
				break;
 8002316:	e000      	b.n	800231a <prvProcessReceivedCommands+0xca>

			default	:
				/* Don't expect to get here. */
				break;
 8002318:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <prvProcessReceivedCommands+0xec>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	f107 0308 	add.w	r3, r7, #8
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	2200      	movs	r2, #0
 8002328:	2300      	movs	r3, #0
 800232a:	f7ff f9d7 	bl	80016dc <xQueueGenericReceive>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d191      	bne.n	8002258 <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200005a4 	.word	0x200005a4

08002340 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af02      	add	r7, sp, #8
 8002346:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002348:	e03d      	b.n	80023c6 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800234a:	4b28      	ldr	r3, [pc, #160]	; (80023ec <prvSwitchTimerLists+0xac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002354:	4b25      	ldr	r3, [pc, #148]	; (80023ec <prvSwitchTimerLists+0xac>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	3304      	adds	r3, #4
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fc44 	bl	8001bf0 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	69b8      	ldr	r0, [r7, #24]
 800236e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d126      	bne.n	80023c6 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	4413      	add	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	429a      	cmp	r2, r3
 8002388:	d90e      	bls.n	80023a8 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <prvSwitchTimerLists+0xac>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	3304      	adds	r3, #4
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	f7ff fbed 	bl	8001b80 <vListInsert>
 80023a6:	e00e      	b.n	80023c6 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 80023a8:	2300      	movs	r3, #0
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	69b8      	ldr	r0, [r7, #24]
 80023ae:	2100      	movs	r1, #0
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	2300      	movs	r3, #0
 80023b4:	f7ff fdfe 	bl	8001fb4 <xTimerGenericCommand>
 80023b8:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <prvSwitchTimerLists+0x86>
 80023c0:	f7ff fd32 	bl	8001e28 <ulPortSetInterruptMask>
 80023c4:	e7fe      	b.n	80023c4 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <prvSwitchTimerLists+0xac>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1bc      	bne.n	800234a <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <prvSwitchTimerLists+0xac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <prvSwitchTimerLists+0xb0>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <prvSwitchTimerLists+0xac>)
 80023dc:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80023de:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <prvSwitchTimerLists+0xb0>)
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	601a      	str	r2, [r3, #0]
}
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000059c 	.word	0x2000059c
 80023f0:	200005a0 	.word	0x200005a0

080023f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80023f8:	f7ff fcf4 	bl	8001de4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <prvCheckForValidListAndQueue+0x40>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d113      	bne.n	800242c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002404:	480c      	ldr	r0, [pc, #48]	; (8002438 <prvCheckForValidListAndQueue+0x44>)
 8002406:	f7ff fb6b 	bl	8001ae0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800240a:	480c      	ldr	r0, [pc, #48]	; (800243c <prvCheckForValidListAndQueue+0x48>)
 800240c:	f7ff fb68 	bl	8001ae0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <prvCheckForValidListAndQueue+0x4c>)
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <prvCheckForValidListAndQueue+0x44>)
 8002414:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <prvCheckForValidListAndQueue+0x50>)
 8002418:	4a08      	ldr	r2, [pc, #32]	; (800243c <prvCheckForValidListAndQueue+0x48>)
 800241a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 800241c:	200a      	movs	r0, #10
 800241e:	210c      	movs	r1, #12
 8002420:	2200      	movs	r2, #0
 8002422:	f7fe ffff 	bl	8001424 <xQueueGenericCreate>
 8002426:	4602      	mov	r2, r0
 8002428:	4b02      	ldr	r3, [pc, #8]	; (8002434 <prvCheckForValidListAndQueue+0x40>)
 800242a:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 800242c:	f7ff fcea 	bl	8001e04 <vPortExitCritical>
}
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200005a4 	.word	0x200005a4
 8002438:	20000574 	.word	0x20000574
 800243c:	20000588 	.word	0x20000588
 8002440:	2000059c 	.word	0x2000059c
 8002444:	200005a0 	.word	0x200005a0

08002448 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	2b00      	cmp	r3, #0
 800245c:	d004      	beq.n	8002468 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f023 0307 	bic.w	r3, r3, #7
 8002464:	3308      	adds	r3, #8
 8002466:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8002468:	f7fe fa4e 	bl	8000908 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <pvPortMalloc+0x88>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8002474:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <pvPortMalloc+0x8c>)
 8002476:	f023 0307 	bic.w	r3, r3, #7
 800247a:	461a      	mov	r2, r3
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <pvPortMalloc+0x88>)
 800247e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <pvPortMalloc+0x90>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	441a      	add	r2, r3
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <pvPortMalloc+0x94>)
 800248a:	429a      	cmp	r2, r3
 800248c:	d813      	bhi.n	80024b6 <pvPortMalloc+0x6e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <pvPortMalloc+0x90>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	441a      	add	r2, r3
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <pvPortMalloc+0x90>)
 8002498:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800249a:	429a      	cmp	r2, r3
 800249c:	d90b      	bls.n	80024b6 <pvPortMalloc+0x6e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <pvPortMalloc+0x88>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <pvPortMalloc+0x90>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <pvPortMalloc+0x90>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	441a      	add	r2, r3
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <pvPortMalloc+0x90>)
 80024b4:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}	
	xTaskResumeAll();
 80024b6:	f7fe fa35 	bl	8000924 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <pvPortMalloc+0x7c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80024c0:	f7fd ffb8 	bl	8000434 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 80024c4:	68fb      	ldr	r3, [r7, #12]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200131b0 	.word	0x200131b0
 80024d4:	200005b4 	.word	0x200005b4
 80024d8:	200131ac 	.word	0x200131ac
 80024dc:	00012bf7 	.word	0x00012bf7

080024e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <vPortFree+0x14>
 80024ee:	f7ff fc9b 	bl	8001e28 <ulPortSetInterruptMask>
 80024f2:	e7fe      	b.n	80024f2 <vPortFree+0x12>
}
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop

080024fc <vStartLEDFlashTasks>:
static portTASK_FUNCTION_PROTO( vLEDFlashTask, pvParameters );

/*-----------------------------------------------------------*/

void vStartLEDFlashTasks( unsigned portBASE_TYPE uxPriority )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af04      	add	r7, sp, #16
 8002502:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xLEDTask;

	/* Create the three tasks. */
	//for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
	for( xLEDTask = 0; xLEDTask < 3; ++xLEDTask )
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e010      	b.n	800252c <vStartLEDFlashTasks+0x30>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, ( signed char * ) "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( xTaskHandle * ) NULL );
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	2300      	movs	r3, #0
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	2300      	movs	r3, #0
 8002514:	9302      	str	r3, [sp, #8]
 8002516:	2300      	movs	r3, #0
 8002518:	9303      	str	r3, [sp, #12]
 800251a:	4807      	ldr	r0, [pc, #28]	; (8002538 <vStartLEDFlashTasks+0x3c>)
 800251c:	4907      	ldr	r1, [pc, #28]	; (800253c <vStartLEDFlashTasks+0x40>)
 800251e:	2282      	movs	r2, #130	; 0x82
 8002520:	2300      	movs	r3, #0
 8002522:	f7fe f8ad 	bl	8000680 <xTaskGenericCreate>
{
signed portBASE_TYPE xLEDTask;

	/* Create the three tasks. */
	//for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
	for( xLEDTask = 0; xLEDTask < 3; ++xLEDTask )
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3301      	adds	r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b02      	cmp	r3, #2
 8002530:	ddeb      	ble.n	800250a <vStartLEDFlashTasks+0xe>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, ( signed char * ) "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( xTaskHandle * ) NULL );
	}
}
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	08002541 	.word	0x08002541
 800253c:	08002bac 	.word	0x08002bac

08002540 <vLEDFlashTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

	/* The parameters are not used. */
	( void ) pvParameters;

	/* Calculate the LED and flash rate. */
	portENTER_CRITICAL();
 8002548:	f7ff fc4c 	bl	8001de4 <vPortEnterCritical>
	{
		/* See which of the eight LED's we should use. */
		uxLED = uxFlashTaskNumber;
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <vLEDFlashTask+0x54>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	617b      	str	r3, [r7, #20]

		/* Update so the next task uses the next LED. */
		uxFlashTaskNumber++;
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <vLEDFlashTask+0x54>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <vLEDFlashTask+0x54>)
 800255a:	601a      	str	r2, [r3, #0]
	}
	portEXIT_CRITICAL();
 800255c:	f7ff fc52 	bl	8001e04 <vPortExitCritical>

	xFlashRate = ledFLASH_RATE_BASE + ( ledFLASH_RATE_BASE * ( portTickType ) uxLED );
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	f240 124d 	movw	r2, #333	; 0x14d
 8002568:	fb02 f303 	mul.w	r3, r2, r3
 800256c:	613b      	str	r3, [r7, #16]
	xFlashRate /= portTICK_RATE_MS;

	/* We will turn the LED on and off again in the delay period, so each
	delay is only half the total period. */
	xFlashRate /= ( portTickType ) 2;
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	613b      	str	r3, [r7, #16]

	/* We need to initialise xLastFlashTime prior to the first call to 
	vTaskDelayUntil(). */
	xLastFlashTime = xTaskGetTickCount();
 8002574:	f7fe fa5c 	bl	8000a30 <xTaskGetTickCount>
 8002578:	4603      	mov	r3, r0
 800257a:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		/* Delay for half the flash period then turn the LED on. */
		vTaskDelayUntil( &xLastFlashTime, (xFlashRate >> 2u ));
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	f107 020c 	add.w	r2, r7, #12
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	f7fe f92e 	bl	80007e8 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 800258c:	6978      	ldr	r0, [r7, #20]
 800258e:	f7fd ff7f 	bl	8000490 <vParTestToggleLED>

		/* Delay for half the flash period then turn the LED off. */
//		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
//		vParTestToggleLED( uxLED );
	}
 8002592:	e7f3      	b.n	800257c <vLEDFlashTask+0x3c>
 8002594:	200131b4 	.word	0x200131b4

08002598 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80025a2:	79fa      	ldrb	r2, [r7, #7]
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <STM_EVAL_LEDInit+0x50>)
 80025a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025aa:	4618      	mov	r0, r3
 80025ac:	2101      	movs	r1, #1
 80025ae:	f000 f99b 	bl	80028e8 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80025b2:	79fa      	ldrb	r2, [r7, #7]
 80025b4:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <STM_EVAL_LEDInit+0x54>)
 80025b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80025ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80025bc:	2301      	movs	r3, #1
 80025be:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80025c8:	2302      	movs	r3, #2
 80025ca:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80025cc:	79fa      	ldrb	r2, [r7, #7]
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <STM_EVAL_LEDInit+0x58>)
 80025d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025d4:	f107 0308 	add.w	r3, r7, #8
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f000 f86e 	bl	80026bc <GPIO_Init>
}
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	08002d0c 	.word	0x08002d0c
 80025ec:	08002d04 	.word	0x08002d04
 80025f0:	2000000c 	.word	0x2000000c

080025f4 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80025fe:	79fa      	ldrb	r2, [r7, #7]
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <STM_EVAL_LEDToggle+0x34>)
 8002602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002606:	79f9      	ldrb	r1, [r7, #7]
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <STM_EVAL_LEDToggle+0x34>)
 800260a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800260e:	6951      	ldr	r1, [r2, #20]
 8002610:	79f8      	ldrb	r0, [r7, #7]
 8002612:	4a06      	ldr	r2, [pc, #24]	; (800262c <STM_EVAL_LEDToggle+0x38>)
 8002614:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8002618:	404a      	eors	r2, r1
 800261a:	615a      	str	r2, [r3, #20]
}
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	2000000c 	.word	0x2000000c
 800262c:	08002d04 	.word	0x08002d04

08002630 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800263e:	d013      	beq.n	8002668 <NVIC_PriorityGroupConfig+0x38>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002646:	d00f      	beq.n	8002668 <NVIC_PriorityGroupConfig+0x38>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800264e:	d00b      	beq.n	8002668 <NVIC_PriorityGroupConfig+0x38>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002656:	d007      	beq.n	8002668 <NVIC_PriorityGroupConfig+0x38>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800265e:	d003      	beq.n	8002668 <NVIC_PriorityGroupConfig+0x38>
 8002660:	4806      	ldr	r0, [pc, #24]	; (800267c <NVIC_PriorityGroupConfig+0x4c>)
 8002662:	2173      	movs	r1, #115	; 0x73
 8002664:	f7fd fefa 	bl	800045c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8002668:	4a05      	ldr	r2, [pc, #20]	; (8002680 <NVIC_PriorityGroupConfig+0x50>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002674:	60d3      	str	r3, [r2, #12]
}
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	08002bb4 	.word	0x08002bb4
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	0ddb      	lsrs	r3, r3, #23
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <EXTI_ClearITPendingBit+0x18>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d104      	bne.n	80026a6 <EXTI_ClearITPendingBit+0x22>
 800269c:	4805      	ldr	r0, [pc, #20]	; (80026b4 <EXTI_ClearITPendingBit+0x30>)
 800269e:	f240 111d 	movw	r1, #285	; 0x11d
 80026a2:	f7fd fedb 	bl	800045c <assert_failed>
  
  EXTI->PR = EXTI_Line;
 80026a6:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <EXTI_ClearITPendingBit+0x34>)
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	615a      	str	r2, [r3, #20]
}
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	08002bfc 	.word	0x08002bfc
 80026b8:	40013c00 	.word	0x40013c00

080026bc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4b7a      	ldr	r3, [pc, #488]	; (80028c0 <GPIO_Init+0x204>)
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d023      	beq.n	8002722 <GPIO_Init+0x66>
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4b79      	ldr	r3, [pc, #484]	; (80028c4 <GPIO_Init+0x208>)
 80026de:	429a      	cmp	r2, r3
 80026e0:	d01f      	beq.n	8002722 <GPIO_Init+0x66>
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4b78      	ldr	r3, [pc, #480]	; (80028c8 <GPIO_Init+0x20c>)
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d01b      	beq.n	8002722 <GPIO_Init+0x66>
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4b77      	ldr	r3, [pc, #476]	; (80028cc <GPIO_Init+0x210>)
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d017      	beq.n	8002722 <GPIO_Init+0x66>
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <GPIO_Init+0x214>)
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d013      	beq.n	8002722 <GPIO_Init+0x66>
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <GPIO_Init+0x218>)
 80026fe:	429a      	cmp	r2, r3
 8002700:	d00f      	beq.n	8002722 <GPIO_Init+0x66>
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4b74      	ldr	r3, [pc, #464]	; (80028d8 <GPIO_Init+0x21c>)
 8002706:	429a      	cmp	r2, r3
 8002708:	d00b      	beq.n	8002722 <GPIO_Init+0x66>
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4b73      	ldr	r3, [pc, #460]	; (80028dc <GPIO_Init+0x220>)
 800270e:	429a      	cmp	r2, r3
 8002710:	d007      	beq.n	8002722 <GPIO_Init+0x66>
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4b72      	ldr	r3, [pc, #456]	; (80028e0 <GPIO_Init+0x224>)
 8002716:	429a      	cmp	r2, r3
 8002718:	d003      	beq.n	8002722 <GPIO_Init+0x66>
 800271a:	4872      	ldr	r0, [pc, #456]	; (80028e4 <GPIO_Init+0x228>)
 800271c:	21bb      	movs	r1, #187	; 0xbb
 800271e:	f7fd fe9d 	bl	800045c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <GPIO_Init+0x76>
 800272a:	486e      	ldr	r0, [pc, #440]	; (80028e4 <GPIO_Init+0x228>)
 800272c:	21bc      	movs	r1, #188	; 0xbc
 800272e:	f7fd fe95 	bl	800045c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	791b      	ldrb	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00f      	beq.n	800275a <GPIO_Init+0x9e>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	791b      	ldrb	r3, [r3, #4]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d00b      	beq.n	800275a <GPIO_Init+0x9e>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	791b      	ldrb	r3, [r3, #4]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d007      	beq.n	800275a <GPIO_Init+0x9e>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	791b      	ldrb	r3, [r3, #4]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d003      	beq.n	800275a <GPIO_Init+0x9e>
 8002752:	4864      	ldr	r0, [pc, #400]	; (80028e4 <GPIO_Init+0x228>)
 8002754:	21bd      	movs	r1, #189	; 0xbd
 8002756:	f7fd fe81 	bl	800045c <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	79db      	ldrb	r3, [r3, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <GPIO_Init+0xbe>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	79db      	ldrb	r3, [r3, #7]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d007      	beq.n	800277a <GPIO_Init+0xbe>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	79db      	ldrb	r3, [r3, #7]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d003      	beq.n	800277a <GPIO_Init+0xbe>
 8002772:	485c      	ldr	r0, [pc, #368]	; (80028e4 <GPIO_Init+0x228>)
 8002774:	21be      	movs	r1, #190	; 0xbe
 8002776:	f7fd fe71 	bl	800045c <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	e097      	b.n	80028b0 <GPIO_Init+0x1f4>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2201      	movs	r2, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	429a      	cmp	r2, r3
 800279a:	f040 8086 	bne.w	80028aa <GPIO_Init+0x1ee>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2103      	movs	r1, #3
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	401a      	ands	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	791b      	ldrb	r3, [r3, #4]
 80027bc:	4619      	mov	r1, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	791b      	ldrb	r3, [r3, #4]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d003      	beq.n	80027dc <GPIO_Init+0x120>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	791b      	ldrb	r3, [r3, #4]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d14e      	bne.n	800287a <GPIO_Init+0x1be>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	795b      	ldrb	r3, [r3, #5]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00f      	beq.n	8002804 <GPIO_Init+0x148>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	795b      	ldrb	r3, [r3, #5]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d00b      	beq.n	8002804 <GPIO_Init+0x148>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	795b      	ldrb	r3, [r3, #5]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d007      	beq.n	8002804 <GPIO_Init+0x148>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	795b      	ldrb	r3, [r3, #5]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d003      	beq.n	8002804 <GPIO_Init+0x148>
 80027fc:	4839      	ldr	r0, [pc, #228]	; (80028e4 <GPIO_Init+0x228>)
 80027fe:	21d0      	movs	r1, #208	; 0xd0
 8002800:	f7fd fe2c 	bl	800045c <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	2103      	movs	r1, #3
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	401a      	ands	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	795b      	ldrb	r3, [r3, #5]
 8002822:	4619      	mov	r1, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	799b      	ldrb	r3, [r3, #6]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <GPIO_Init+0x18e>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	799b      	ldrb	r3, [r3, #6]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d003      	beq.n	800284a <GPIO_Init+0x18e>
 8002842:	4828      	ldr	r0, [pc, #160]	; (80028e4 <GPIO_Init+0x228>)
 8002844:	21d7      	movs	r1, #215	; 0xd7
 8002846:	f7fd fe09 	bl	800045c <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	b29b      	uxth	r3, r3
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	401a      	ands	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	799b      	ldrb	r3, [r3, #6]
 8002868:	4619      	mov	r1, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	b29b      	uxth	r3, r3
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	b29b      	uxth	r3, r3
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	b29b      	uxth	r3, r3
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2103      	movs	r1, #3
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	401a      	ands	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	79db      	ldrb	r3, [r3, #7]
 800289a:	4619      	mov	r1, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3301      	adds	r3, #1
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b0f      	cmp	r3, #15
 80028b4:	f67f af64 	bls.w	8002780 <GPIO_Init+0xc4>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40020000 	.word	0x40020000
 80028c4:	40020400 	.word	0x40020400
 80028c8:	40020800 	.word	0x40020800
 80028cc:	40020c00 	.word	0x40020c00
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40021400 	.word	0x40021400
 80028d8:	40021800 	.word	0x40021800
 80028dc:	40021c00 	.word	0x40021c00
 80028e0:	40022000 	.word	0x40022000
 80028e4:	08002c4c 	.word	0x08002c4c

080028e8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <RCC_AHB1PeriphClockCmd+0x64>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <RCC_AHB1PeriphClockCmd+0x1c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d104      	bne.n	800290e <RCC_AHB1PeriphClockCmd+0x26>
 8002904:	4812      	ldr	r0, [pc, #72]	; (8002950 <RCC_AHB1PeriphClockCmd+0x68>)
 8002906:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800290a:	f7fd fda7 	bl	800045c <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d007      	beq.n	8002924 <RCC_AHB1PeriphClockCmd+0x3c>
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d004      	beq.n	8002924 <RCC_AHB1PeriphClockCmd+0x3c>
 800291a:	480d      	ldr	r0, [pc, #52]	; (8002950 <RCC_AHB1PeriphClockCmd+0x68>)
 800291c:	f240 4142 	movw	r1, #1090	; 0x442
 8002920:	f7fd fd9c 	bl	800045c <assert_failed>
  if (NewState != DISABLE)
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d006      	beq.n	8002938 <RCC_AHB1PeriphClockCmd+0x50>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <RCC_AHB1PeriphClockCmd+0x6c>)
 800292c:	4a09      	ldr	r2, [pc, #36]	; (8002954 <RCC_AHB1PeriphClockCmd+0x6c>)
 800292e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	430a      	orrs	r2, r1
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
 8002936:	e006      	b.n	8002946 <RCC_AHB1PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <RCC_AHB1PeriphClockCmd+0x6c>)
 800293a:	4a06      	ldr	r2, [pc, #24]	; (8002954 <RCC_AHB1PeriphClockCmd+0x6c>)
 800293c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	43d2      	mvns	r2, r2
 8002942:	400a      	ands	r2, r1
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	818bee00 	.word	0x818bee00
 8002950:	08002c9c 	.word	0x08002c9c
 8002954:	40023800 	.word	0x40023800

08002958 <__libc_init_array>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	4e0f      	ldr	r6, [pc, #60]	; (8002998 <__libc_init_array+0x40>)
 800295c:	4d0f      	ldr	r5, [pc, #60]	; (800299c <__libc_init_array+0x44>)
 800295e:	1b76      	subs	r6, r6, r5
 8002960:	10b6      	asrs	r6, r6, #2
 8002962:	d007      	beq.n	8002974 <__libc_init_array+0x1c>
 8002964:	3d04      	subs	r5, #4
 8002966:	2400      	movs	r4, #0
 8002968:	3401      	adds	r4, #1
 800296a:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800296e:	4798      	blx	r3
 8002970:	42a6      	cmp	r6, r4
 8002972:	d1f9      	bne.n	8002968 <__libc_init_array+0x10>
 8002974:	4e0a      	ldr	r6, [pc, #40]	; (80029a0 <__libc_init_array+0x48>)
 8002976:	4d0b      	ldr	r5, [pc, #44]	; (80029a4 <__libc_init_array+0x4c>)
 8002978:	1b76      	subs	r6, r6, r5
 800297a:	f000 f9d3 	bl	8002d24 <_init>
 800297e:	10b6      	asrs	r6, r6, #2
 8002980:	d008      	beq.n	8002994 <__libc_init_array+0x3c>
 8002982:	3d04      	subs	r5, #4
 8002984:	2400      	movs	r4, #0
 8002986:	3401      	adds	r4, #1
 8002988:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800298c:	4798      	blx	r3
 800298e:	42a6      	cmp	r6, r4
 8002990:	d1f9      	bne.n	8002986 <__libc_init_array+0x2e>
 8002992:	bd70      	pop	{r4, r5, r6, pc}
 8002994:	bd70      	pop	{r4, r5, r6, pc}
 8002996:	bf00      	nop
 8002998:	08002d3c 	.word	0x08002d3c
 800299c:	08002d3c 	.word	0x08002d3c
 80029a0:	08002d44 	.word	0x08002d44
 80029a4:	08002d3c 	.word	0x08002d3c

080029a8 <memcmp>:
 80029a8:	2a03      	cmp	r2, #3
 80029aa:	b470      	push	{r4, r5, r6}
 80029ac:	d928      	bls.n	8002a00 <memcmp+0x58>
 80029ae:	ea40 0301 	orr.w	r3, r0, r1
 80029b2:	079b      	lsls	r3, r3, #30
 80029b4:	d013      	beq.n	80029de <memcmp+0x36>
 80029b6:	7805      	ldrb	r5, [r0, #0]
 80029b8:	780c      	ldrb	r4, [r1, #0]
 80029ba:	42a5      	cmp	r5, r4
 80029bc:	d124      	bne.n	8002a08 <memcmp+0x60>
 80029be:	3a01      	subs	r2, #1
 80029c0:	2300      	movs	r3, #0
 80029c2:	e005      	b.n	80029d0 <memcmp+0x28>
 80029c4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80029c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80029cc:	42a5      	cmp	r5, r4
 80029ce:	d11b      	bne.n	8002a08 <memcmp+0x60>
 80029d0:	4293      	cmp	r3, r2
 80029d2:	f103 0301 	add.w	r3, r3, #1
 80029d6:	d1f5      	bne.n	80029c4 <memcmp+0x1c>
 80029d8:	2000      	movs	r0, #0
 80029da:	bc70      	pop	{r4, r5, r6}
 80029dc:	4770      	bx	lr
 80029de:	460c      	mov	r4, r1
 80029e0:	4603      	mov	r3, r0
 80029e2:	6825      	ldr	r5, [r4, #0]
 80029e4:	681e      	ldr	r6, [r3, #0]
 80029e6:	42ae      	cmp	r6, r5
 80029e8:	4621      	mov	r1, r4
 80029ea:	4618      	mov	r0, r3
 80029ec:	f104 0404 	add.w	r4, r4, #4
 80029f0:	f103 0304 	add.w	r3, r3, #4
 80029f4:	d104      	bne.n	8002a00 <memcmp+0x58>
 80029f6:	3a04      	subs	r2, #4
 80029f8:	2a03      	cmp	r2, #3
 80029fa:	4618      	mov	r0, r3
 80029fc:	4621      	mov	r1, r4
 80029fe:	d8f0      	bhi.n	80029e2 <memcmp+0x3a>
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	d1d8      	bne.n	80029b6 <memcmp+0xe>
 8002a04:	4610      	mov	r0, r2
 8002a06:	e7e8      	b.n	80029da <memcmp+0x32>
 8002a08:	1b28      	subs	r0, r5, r4
 8002a0a:	bc70      	pop	{r4, r5, r6}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop

08002a10 <memset>:
 8002a10:	b4f0      	push	{r4, r5, r6, r7}
 8002a12:	0784      	lsls	r4, r0, #30
 8002a14:	d043      	beq.n	8002a9e <memset+0x8e>
 8002a16:	1e54      	subs	r4, r2, #1
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	d03e      	beq.n	8002a9a <memset+0x8a>
 8002a1c:	b2cd      	uxtb	r5, r1
 8002a1e:	4603      	mov	r3, r0
 8002a20:	e003      	b.n	8002a2a <memset+0x1a>
 8002a22:	1e62      	subs	r2, r4, #1
 8002a24:	2c00      	cmp	r4, #0
 8002a26:	d038      	beq.n	8002a9a <memset+0x8a>
 8002a28:	4614      	mov	r4, r2
 8002a2a:	f803 5b01 	strb.w	r5, [r3], #1
 8002a2e:	079a      	lsls	r2, r3, #30
 8002a30:	d1f7      	bne.n	8002a22 <memset+0x12>
 8002a32:	2c03      	cmp	r4, #3
 8002a34:	d92a      	bls.n	8002a8c <memset+0x7c>
 8002a36:	b2cd      	uxtb	r5, r1
 8002a38:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8002a3c:	2c0f      	cmp	r4, #15
 8002a3e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8002a42:	d915      	bls.n	8002a70 <memset+0x60>
 8002a44:	f1a4 0710 	sub.w	r7, r4, #16
 8002a48:	093f      	lsrs	r7, r7, #4
 8002a4a:	f103 0610 	add.w	r6, r3, #16
 8002a4e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8002a52:	461a      	mov	r2, r3
 8002a54:	6015      	str	r5, [r2, #0]
 8002a56:	6055      	str	r5, [r2, #4]
 8002a58:	6095      	str	r5, [r2, #8]
 8002a5a:	60d5      	str	r5, [r2, #12]
 8002a5c:	3210      	adds	r2, #16
 8002a5e:	42b2      	cmp	r2, r6
 8002a60:	d1f8      	bne.n	8002a54 <memset+0x44>
 8002a62:	f004 040f 	and.w	r4, r4, #15
 8002a66:	3701      	adds	r7, #1
 8002a68:	2c03      	cmp	r4, #3
 8002a6a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8002a6e:	d90d      	bls.n	8002a8c <memset+0x7c>
 8002a70:	461e      	mov	r6, r3
 8002a72:	4622      	mov	r2, r4
 8002a74:	3a04      	subs	r2, #4
 8002a76:	2a03      	cmp	r2, #3
 8002a78:	f846 5b04 	str.w	r5, [r6], #4
 8002a7c:	d8fa      	bhi.n	8002a74 <memset+0x64>
 8002a7e:	1f22      	subs	r2, r4, #4
 8002a80:	f022 0203 	bic.w	r2, r2, #3
 8002a84:	3204      	adds	r2, #4
 8002a86:	4413      	add	r3, r2
 8002a88:	f004 0403 	and.w	r4, r4, #3
 8002a8c:	b12c      	cbz	r4, 8002a9a <memset+0x8a>
 8002a8e:	b2c9      	uxtb	r1, r1
 8002a90:	441c      	add	r4, r3
 8002a92:	f803 1b01 	strb.w	r1, [r3], #1
 8002a96:	42a3      	cmp	r3, r4
 8002a98:	d1fb      	bne.n	8002a92 <memset+0x82>
 8002a9a:	bcf0      	pop	{r4, r5, r6, r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	4614      	mov	r4, r2
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	e7c6      	b.n	8002a32 <memset+0x22>

08002aa4 <register_fini>:
 8002aa4:	4b02      	ldr	r3, [pc, #8]	; (8002ab0 <register_fini+0xc>)
 8002aa6:	b113      	cbz	r3, 8002aae <register_fini+0xa>
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <register_fini+0x10>)
 8002aaa:	f000 b805 	b.w	8002ab8 <atexit>
 8002aae:	4770      	bx	lr
 8002ab0:	00000000 	.word	0x00000000
 8002ab4:	08002ac5 	.word	0x08002ac5

08002ab8 <atexit>:
 8002ab8:	4601      	mov	r1, r0
 8002aba:	2000      	movs	r0, #0
 8002abc:	4602      	mov	r2, r0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f000 b818 	b.w	8002af4 <__register_exitproc>

08002ac4 <__libc_fini_array>:
 8002ac4:	b538      	push	{r3, r4, r5, lr}
 8002ac6:	4d09      	ldr	r5, [pc, #36]	; (8002aec <__libc_fini_array+0x28>)
 8002ac8:	4c09      	ldr	r4, [pc, #36]	; (8002af0 <__libc_fini_array+0x2c>)
 8002aca:	1b64      	subs	r4, r4, r5
 8002acc:	10a4      	asrs	r4, r4, #2
 8002ace:	bf18      	it	ne
 8002ad0:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8002ad4:	d005      	beq.n	8002ae2 <__libc_fini_array+0x1e>
 8002ad6:	3c01      	subs	r4, #1
 8002ad8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8002adc:	4798      	blx	r3
 8002ade:	2c00      	cmp	r4, #0
 8002ae0:	d1f9      	bne.n	8002ad6 <__libc_fini_array+0x12>
 8002ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ae6:	f000 b923 	b.w	8002d30 <_fini>
 8002aea:	bf00      	nop
 8002aec:	08002d44 	.word	0x08002d44
 8002af0:	08002d48 	.word	0x08002d48

08002af4 <__register_exitproc>:
 8002af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af6:	4c27      	ldr	r4, [pc, #156]	; (8002b94 <__register_exitproc+0xa0>)
 8002af8:	6826      	ldr	r6, [r4, #0]
 8002afa:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 8002afe:	b085      	sub	sp, #20
 8002b00:	4607      	mov	r7, r0
 8002b02:	2c00      	cmp	r4, #0
 8002b04:	d041      	beq.n	8002b8a <__register_exitproc+0x96>
 8002b06:	6865      	ldr	r5, [r4, #4]
 8002b08:	2d1f      	cmp	r5, #31
 8002b0a:	dd1e      	ble.n	8002b4a <__register_exitproc+0x56>
 8002b0c:	4822      	ldr	r0, [pc, #136]	; (8002b98 <__register_exitproc+0xa4>)
 8002b0e:	b918      	cbnz	r0, 8002b18 <__register_exitproc+0x24>
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295
 8002b14:	b005      	add	sp, #20
 8002b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b18:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002b1c:	9103      	str	r1, [sp, #12]
 8002b1e:	9202      	str	r2, [sp, #8]
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	f3af 8000 	nop.w
 8002b26:	9903      	ldr	r1, [sp, #12]
 8002b28:	9a02      	ldr	r2, [sp, #8]
 8002b2a:	9b01      	ldr	r3, [sp, #4]
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	d0ee      	beq.n	8002b10 <__register_exitproc+0x1c>
 8002b32:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8002b36:	6025      	str	r5, [r4, #0]
 8002b38:	2000      	movs	r0, #0
 8002b3a:	6060      	str	r0, [r4, #4]
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8002b42:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8002b46:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8002b4a:	b93f      	cbnz	r7, 8002b5c <__register_exitproc+0x68>
 8002b4c:	1cab      	adds	r3, r5, #2
 8002b4e:	2000      	movs	r0, #0
 8002b50:	3501      	adds	r5, #1
 8002b52:	6065      	str	r5, [r4, #4]
 8002b54:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8002b58:	b005      	add	sp, #20
 8002b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b5c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8002b60:	f04f 0c01 	mov.w	ip, #1
 8002b64:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8002b68:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8002b6c:	fa0c f205 	lsl.w	r2, ip, r5
 8002b70:	4316      	orrs	r6, r2
 8002b72:	2f02      	cmp	r7, #2
 8002b74:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8002b78:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8002b7c:	d1e6      	bne.n	8002b4c <__register_exitproc+0x58>
 8002b7e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8002b82:	431a      	orrs	r2, r3
 8002b84:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8002b88:	e7e0      	b.n	8002b4c <__register_exitproc+0x58>
 8002b8a:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 8002b8e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8002b92:	e7b8      	b.n	8002b06 <__register_exitproc+0x12>
 8002b94:	08002d20 	.word	0x08002d20
 8002b98:	00000000 	.word	0x00000000
 8002b9c:	454c4449 	.word	0x454c4449
 8002ba0:	00000000 	.word	0x00000000
 8002ba4:	20726d54 	.word	0x20726d54
 8002ba8:	00637653 	.word	0x00637653
 8002bac:	7844454c 	.word	0x7844454c
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	2f707041 	.word	0x2f707041
 8002bb8:	334d5453 	.word	0x334d5453
 8002bbc:	2d344632 	.word	0x2d344632
 8002bc0:	63736944 	.word	0x63736944
 8002bc4:	7265766f 	.word	0x7265766f
 8002bc8:	694c2f79 	.word	0x694c2f79
 8002bcc:	72617262 	.word	0x72617262
 8002bd0:	2f736569 	.word	0x2f736569
 8002bd4:	334d5453 	.word	0x334d5453
 8002bd8:	78344632 	.word	0x78344632
 8002bdc:	74535f78 	.word	0x74535f78
 8002be0:	72655064 	.word	0x72655064
 8002be4:	5f687069 	.word	0x5f687069
 8002be8:	76697244 	.word	0x76697244
 8002bec:	732f7265 	.word	0x732f7265
 8002bf0:	6d2f6372 	.word	0x6d2f6372
 8002bf4:	2e637369 	.word	0x2e637369
 8002bf8:	00000063 	.word	0x00000063
 8002bfc:	2f707041 	.word	0x2f707041
 8002c00:	334d5453 	.word	0x334d5453
 8002c04:	2d344632 	.word	0x2d344632
 8002c08:	63736944 	.word	0x63736944
 8002c0c:	7265766f 	.word	0x7265766f
 8002c10:	694c2f79 	.word	0x694c2f79
 8002c14:	72617262 	.word	0x72617262
 8002c18:	2f736569 	.word	0x2f736569
 8002c1c:	334d5453 	.word	0x334d5453
 8002c20:	78344632 	.word	0x78344632
 8002c24:	74535f78 	.word	0x74535f78
 8002c28:	72655064 	.word	0x72655064
 8002c2c:	5f687069 	.word	0x5f687069
 8002c30:	76697244 	.word	0x76697244
 8002c34:	732f7265 	.word	0x732f7265
 8002c38:	732f6372 	.word	0x732f6372
 8002c3c:	32336d74 	.word	0x32336d74
 8002c40:	78783466 	.word	0x78783466
 8002c44:	7478655f 	.word	0x7478655f
 8002c48:	00632e69 	.word	0x00632e69
 8002c4c:	2f707041 	.word	0x2f707041
 8002c50:	334d5453 	.word	0x334d5453
 8002c54:	2d344632 	.word	0x2d344632
 8002c58:	63736944 	.word	0x63736944
 8002c5c:	7265766f 	.word	0x7265766f
 8002c60:	694c2f79 	.word	0x694c2f79
 8002c64:	72617262 	.word	0x72617262
 8002c68:	2f736569 	.word	0x2f736569
 8002c6c:	334d5453 	.word	0x334d5453
 8002c70:	78344632 	.word	0x78344632
 8002c74:	74535f78 	.word	0x74535f78
 8002c78:	72655064 	.word	0x72655064
 8002c7c:	5f687069 	.word	0x5f687069
 8002c80:	76697244 	.word	0x76697244
 8002c84:	732f7265 	.word	0x732f7265
 8002c88:	732f6372 	.word	0x732f6372
 8002c8c:	32336d74 	.word	0x32336d74
 8002c90:	78783466 	.word	0x78783466
 8002c94:	6970675f 	.word	0x6970675f
 8002c98:	00632e6f 	.word	0x00632e6f
 8002c9c:	2f707041 	.word	0x2f707041
 8002ca0:	334d5453 	.word	0x334d5453
 8002ca4:	2d344632 	.word	0x2d344632
 8002ca8:	63736944 	.word	0x63736944
 8002cac:	7265766f 	.word	0x7265766f
 8002cb0:	694c2f79 	.word	0x694c2f79
 8002cb4:	72617262 	.word	0x72617262
 8002cb8:	2f736569 	.word	0x2f736569
 8002cbc:	334d5453 	.word	0x334d5453
 8002cc0:	78344632 	.word	0x78344632
 8002cc4:	74535f78 	.word	0x74535f78
 8002cc8:	72655064 	.word	0x72655064
 8002ccc:	5f687069 	.word	0x5f687069
 8002cd0:	76697244 	.word	0x76697244
 8002cd4:	732f7265 	.word	0x732f7265
 8002cd8:	732f6372 	.word	0x732f6372
 8002cdc:	32336d74 	.word	0x32336d74
 8002ce0:	78783466 	.word	0x78783466
 8002ce4:	6363725f 	.word	0x6363725f
 8002ce8:	0000632e 	.word	0x0000632e

08002cec <xLEDs>:
 8002cec:	03020001                                ....

08002cf0 <ucExpectedStackBytes.8469>:
 8002cf0:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 8002d00:	a5a5a5a5                                ....

08002d04 <GPIO_PIN>:
 8002d04:	20001000 80004000                       ... .@..

08002d0c <GPIO_CLK>:
 8002d0c:	00000008 00000008 00000008 00000008     ................
 8002d1c:	00000043                                C...

08002d20 <_global_impure_ptr>:
 8002d20:	20000020                                 .. 

08002d24 <_init>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	bf00      	nop
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr

08002d30 <_fini>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	bf00      	nop
 8002d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d36:	bc08      	pop	{r3}
 8002d38:	469e      	mov	lr, r3
 8002d3a:	4770      	bx	lr
