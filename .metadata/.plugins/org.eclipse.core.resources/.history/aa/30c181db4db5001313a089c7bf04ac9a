/*
 * speaker.c
 *
 *  Created on: Mar 27, 2014
 *      Author: jerzy
 */

#include <stdlib.h>
#include "FreeRTOS.h"
#include "task.h"
#include "speaker.h"




#define speakerSTACK_SIZE		configMINIMAL_STACK_SIZE

//void vUart2SendTask( void *pvParameters );
static portTASK_FUNCTION_PROTO( vSpeakerTask, pvParameters );




void vStartSpeakerTask( unsigned portBASE_TYPE uxPriority )
{
//	signed portBASE_TYPE xLEDTask;
	TaskHandle_t *pxSpeakerTaskHandler;	//todo: na razie uninitialised
	void *parametry;						//todo: na razie uninitialised

	/* Spawn the task. */
	xTaskCreate(vSpeakerTask, "Speaker", speakerSTACK_SIZE, parametry,
				uxPriority, ( TaskHandle_t * ) pxSpeakerTaskHandler );
}

static portTASK_FUNCTION( vSpeakerTask, pvParameters )
{
	/* Create two instances of the task that will send to the queue. The task
	parameter is used to pass the value that the task will write to the queue,
	so one task will continuously write 100 to the queue while the other task
	will continuously write 200 to the queue. Both tasks are created at
	priority 1. */
//	xTaskCreate( vSenderTask, "Sender1", 1000, ( void * ) 100, 1, NULL );
//	xTaskCreate( vSenderTask, "Sender2", 1000, ( void * ) 200, 1, NULL );



	long lValueToSend;
	portBASE_TYPE xStatus;

	while(1)
	{
		xStatus = xQueueSendToBack( xUsart2OutQueue, &lValueToSend, 0 );

	}


}
